CREATE TABLE B_CONTROLLER_GROUP
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	NAME VARCHAR2(255 CHAR) NOT NULL,
	UPDATE_PERIOD NUMBER(18) DEFAULT -1 NOT NULL,
	DISABLE_DEACTIVATED CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	DESCRIPTION CLOB,
	MODIFIED_BY NUMBER(18),
	DATE_CREATE DATE NOT NULL,
	CREATED_BY NUMBER(18),
	INSTALL_INFO CLOB,
	UNINSTALL_INFO CLOB,
	INSTALL_PHP CLOB,
	UNINSTALL_PHP CLOB,
	TRIAL_PERIOD NUMBER(18),
	COUNTER_UPDATE_PERIOD NUMBER(18),
	CHECK_COUNTER_FREE_SPACE CHAR(1 CHAR),
	CHECK_COUNTER_SITES CHAR(1 CHAR),
	CHECK_COUNTER_USERS CHAR(1 CHAR),
	CHECK_COUNTER_LAST_AUTH CHAR(1 CHAR),
	CONSTRAINT PK_CONTROLLER_GROUP PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_CONTROLLER_GROUP START WITH 2
/

CREATE OR REPLACE TRIGGER B_CONTROLLER_GROUP_INSERT
BEFORE INSERT
ON B_CONTROLLER_GROUP
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CONTROLLER_GROUP.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

INSERT INTO B_CONTROLLER_GROUP(ID, NAME, DATE_CREATE, CREATED_BY, MODIFIED_BY) VALUES(1, '(default)', SYSDATE, 1, 1)
/

CREATE TABLE B_CONTROLLER_MEMBER
(
	ID NUMBER(18) NOT NULL,
	MEMBER_ID VARCHAR2(32 CHAR) NOT NULL,
	SECRET_ID VARCHAR2(32 CHAR) NOT NULL,
	NAME VARCHAR2(255 CHAR) NOT NULL,
	URL VARCHAR2(255 CHAR) NOT NULL,
	HOSTNAME VARCHAR2(255 CHAR),
	EMAIL VARCHAR2(255 CHAR),
	CONTACT_PERSON VARCHAR2(255 CHAR),
	CONTROLLER_GROUP_ID NUMBER(18) NOT NULL,
	DISCONNECTED CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	SHARED_KERNEL CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	ACTIVE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	DATE_ACTIVE_FROM DATE,
	DATE_ACTIVE_TO DATE,
	SITE_ACTIVE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	MODIFIED_BY NUMBER(18),
	DATE_CREATE DATE NOT NULL,
	CREATED_BY NUMBER(18),
	IN_GROUP_FROM DATE,
	NOTES CLOB,
	COUNTER_FREE_SPACE NUMBER,
	COUNTER_SITES NUMBER(18),
	COUNTER_USERS NUMBER(18),
	COUNTER_LAST_AUTH DATE,
	COUNTERS_UPDATED DATE,
	CONSTRAINT PK_CONTROLLER_MEMBER PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_CONTROLLER_MEMBER
/

CREATE OR REPLACE TRIGGER B_CONTROLLER_MEMBER_INSERT
BEFORE INSERT
ON B_CONTROLLER_MEMBER
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CONTROLLER_MEMBER.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE UNIQUE INDEX UX_CONTROLLER_MEMBER_MEMBER_ID ON B_CONTROLLER_MEMBER(MEMBER_ID)
/
CREATE INDEX IX_CONTR_MEMBER_ACTIVE_GROUP ON B_CONTROLLER_MEMBER(ACTIVE, CONTROLLER_GROUP_ID)
/

CREATE TABLE B_CONTROLLER_MEMBER_LOG
(
	ID NUMBER(18) NOT NULL,
	CONTROLLER_MEMBER_ID NUMBER(18) NOT NULL,
	USER_ID NUMBER(18) NOT NULL,
	CREATED_DATE DATE NOT NULL,
	FIELD VARCHAR2(50 CHAR) NOT NULL,
	FROM_VALUE CLOB,
	TO_VALUE CLOB,
	NOTES CLOB,
	CONSTRAINT PK_B_CONTROLLER_MEMBER_LOG  PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_CONTROLLER_MEMBER_LOG
/

CREATE OR REPLACE TRIGGER B_CONTROLLER_MEMBER_LOG_INSERT
BEFORE INSERT
ON B_CONTROLLER_MEMBER_LOG
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CONTROLLER_MEMBER_LOG.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE INDEX IX_B_CONTROLLER_MEMBER_LOG ON B_CONTROLLER_MEMBER_LOG(CONTROLLER_MEMBER_ID, FIELD, CREATED_DATE)
/

CREATE TABLE B_CONTROLLER_COMMAND
(
	ID NUMBER(18) NOT NULL,
	MEMBER_ID VARCHAR2(32 CHAR) NOT NULL,
	COMMAND_ID VARCHAR2(32 CHAR) NOT NULL,
	DATE_INSERT DATE NOT NULL,
	COMMAND CLOB NOT NULL,
	DATE_EXEC DATE,
	TASK_ID NUMBER(18),
	ADD_PARAMS CLOB,
	CONSTRAINT PK_CONTROLLER_COMMAND PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_CONTROLLER_COMMAND
/

CREATE OR REPLACE TRIGGER B_CONTROLLER_COMMAND_INSERT
BEFORE INSERT
ON B_CONTROLLER_COMMAND
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CONTROLLER_COMMAND.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE UNIQUE INDEX UX_CONTR_COMMAND_MEMBER_ID ON B_CONTROLLER_COMMAND(MEMBER_ID, COMMAND_ID)
/

CREATE TABLE B_CONTROLLER_TASK
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	DATE_CREATE DATE NOT NULL,
	TASK_ID VARCHAR2(50 CHAR) NOT NULL,
	CONTROLLER_MEMBER_ID NUMBER(18) NOT NULL,
	DATE_EXECUTE DATE,
	INIT_EXECUTE CLOB,
	INIT_EXECUTE_PARAMS CLOB,
	INIT_CRC NUMBER(18) DEFAULT 0 NOT NULL,
	UPDATE_PERIOD NUMBER(18) DEFAULT 0 NOT NULL,
	RESULT_EXECUTE CLOB,
	STATUS CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	INDEX_SALT NUMBER(18) DEFAULT 0 NOT NULL,
	CONSTRAINT PK_CONTROLLER_TASK PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_CONTROLLER_TASK
/

CREATE OR REPLACE TRIGGER B_CONTROLLER_TASK_INSERT
BEFORE INSERT
ON B_CONTROLLER_TASK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CONTROLLER_TASK.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE INDEX IX_CONTR_TASK_EXEC ON B_CONTROLLER_TASK(DATE_EXECUTE)
/
CREATE UNIQUE INDEX UX_CONTR_TASK ON B_CONTROLLER_TASK(CONTROLLER_MEMBER_ID, TASK_ID, DATE_EXECUTE, INIT_CRC, INDEX_SALT)
/
CREATE INDEX IX_B_CONTROLLER_TASK_1 ON B_CONTROLLER_TASK(STATUS, ID)
/

CREATE TABLE B_CONTROLLER_LOG
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	CONTROLLER_MEMBER_ID NUMBER(18) NOT NULL,
	NAME VARCHAR2(255 CHAR) NOT NULL,
	DESCRIPTION CLOB,
	TASK_ID NUMBER(18),
	USER_ID NUMBER(18),
	STATUS CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	CONSTRAINT PK_CONTROLLER_LOG PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_CONTROLLER_LOG
/

CREATE OR REPLACE TRIGGER B_CONTROLLER_LOG_INSERT
BEFORE INSERT
ON B_CONTROLLER_LOG
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CONTROLLER_LOG.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE INDEX IX_CONTR_LOG_MEMBER ON B_CONTROLLER_LOG(CONTROLLER_MEMBER_ID)
/
CREATE INDEX IX_CONTR_LOG_TASK ON B_CONTROLLER_LOG(TASK_ID)
/

CREATE TABLE B_CONTROLLER_COUNTER
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	COUNTER_TYPE CHAR(1 CHAR) DEFAULT 'F' NOT NULL,
	COUNTER_FORMAT CHAR(1 CHAR),
	NAME VARCHAR2(255 CHAR) NOT NULL,
	COMMAND CLOB NOT NULL,
	CONSTRAINT PK_B_CONTROLLER_COUNTER PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CONTROLLER_COUNTER
/
CREATE OR REPLACE TRIGGER B_CONTROLLER_COUNTER_INSERT
BEFORE INSERT
ON B_CONTROLLER_COUNTER
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CONTROLLER_COUNTER.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE TABLE B_CONTROLLER_COUNTER_GROUP
(
	CONTROLLER_GROUP_ID NUMBER(18) NOT NULL,
	CONTROLLER_COUNTER_ID NUMBER(18) NOT NULL
)
/
CREATE UNIQUE INDEX UX_B_CONTROLLER_COUNTER_GROUP1 ON B_CONTROLLER_COUNTER_GROUP(CONTROLLER_GROUP_ID, CONTROLLER_COUNTER_ID)
/
CREATE UNIQUE INDEX UX_B_CONTROLLER_COUNTER_GROUP2 ON B_CONTROLLER_COUNTER_GROUP(CONTROLLER_COUNTER_ID, CONTROLLER_GROUP_ID)
/

CREATE TABLE B_CONTROLLER_COUNTER_VALUE
(
	CONTROLLER_MEMBER_ID NUMBER(18) NOT NULL,
	CONTROLLER_COUNTER_ID NUMBER(18) NOT NULL,
	VALUE_INT NUMBER(18),
	VALUE_FLOAT NUMBER,
	VALUE_DATE DATE,
	VALUE_STRING VARCHAR2(255 CHAR),
	CONSTRAINT PK_B_CONTROLLER_COUNTER_VALUE PRIMARY KEY (CONTROLLER_MEMBER_ID, CONTROLLER_COUNTER_ID)
)
/
CREATE UNIQUE INDEX UX_B_CONTROLLER_COUNTER_VALUE ON B_CONTROLLER_COUNTER_VALUE(CONTROLLER_COUNTER_ID, CONTROLLER_MEMBER_ID)
/

CREATE TABLE B_CONTROLLER_GROUP_MAP
(
	ID NUMBER(18) NOT NULL,
	CONTROLLER_GROUP_ID NUMBER(18),
	REMOTE_GROUP_CODE VARCHAR2(30 CHAR),
	LOCAL_GROUP_CODE VARCHAR2(30 CHAR),
	CONSTRAINT PK_B_CONTROLLER_GROUP_MAP PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_CONTROLLER_GROUP_MAP
/
CREATE OR REPLACE TRIGGER B_CONTROLLER_GROUP_MAP_INSERT
BEFORE INSERT
ON B_CONTROLLER_GROUP_MAP
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CONTROLLER_GROUP_MAP.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE TABLE B_CONTROLLER_AUTH_LOG
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	FROM_CONTROLLER_MEMBER_ID NUMBER(18),
	TO_CONTROLLER_MEMBER_ID NUMBER(18),
	TYPE VARCHAR2(50 CHAR),
	STATUS CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	USER_ID NUMBER(18),
	USER_NAME VARCHAR2(255 CHAR),
	CONSTRAINT PK_B_CONTROLLER_AUTH_LOG PRIMARY KEY (ID)
)
/
CREATE INDEX IX_B_CONTROLLER_AUTH_LOG_0 ON B_CONTROLLER_AUTH_LOG(TIMESTAMP_X)
/
CREATE INDEX IX_B_CONTROLLER_AUTH_LOG_1 ON B_CONTROLLER_AUTH_LOG(FROM_CONTROLLER_MEMBER_ID)
/
CREATE INDEX IX_B_CONTROLLER_AUTH_LOG_2 ON B_CONTROLLER_AUTH_LOG(TO_CONTROLLER_MEMBER_ID)
/
CREATE SEQUENCE SQ_B_CONTROLLER_AUTH_LOG
/
CREATE OR REPLACE TRIGGER B_CONTROLLER_AUTH_LOG_INSERT
BEFORE INSERT
ON B_CONTROLLER_AUTH_LOG
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CONTROLLER_AUTH_LOG.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE TABLE B_CONTROLLER_AUTH_GRANT
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	GRANTED_BY NUMBER(18) NOT NULL,
	CONTROLLER_MEMBER_ID NUMBER(18) NOT NULL,
	GRANTEE_USER_ID NUMBER(18),
	GRANTEE_GROUP_ID NUMBER(18),
	ACTIVE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	SCOPE VARCHAR2(20 CHAR) NOT NULL,
	DATE_START DATE,
	DATE_END DATE,
	NOTE VARCHAR2(255 CHAR),
	CONSTRAINT PK_B_CONTROLLER_AUTH_GRANT PRIMARY KEY (ID)
)
/
CREATE INDEX IX_B_CONTROLLER_AUTH_GRANT_0 ON B_CONTROLLER_AUTH_GRANT(CONTROLLER_MEMBER_ID)
/
CREATE SEQUENCE SQ_B_CONTROLLER_AUTH_GRANT
/
CREATE OR REPLACE TRIGGER B_CONTROLLER_AUTH_GRANT_INSERT
BEFORE INSERT
ON B_CONTROLLER_AUTH_GRANT
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_CONTROLLER_AUTH_GRANT.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/
