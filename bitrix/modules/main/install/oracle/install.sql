CREATE TABLE b_file
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	MODULE_ID VARCHAR2(50 CHAR) NULL,
	HEIGHT NUMBER(18) NULL,
	WIDTH NUMBER(18) NULL,
	FILE_SIZE NUMBER(18) NULL,
	CONTENT_TYPE VARCHAR2(255 CHAR) DEFAULT ('IMAGE') NULL,
	SUBDIR VARCHAR2(255 CHAR) NULL,
	FILE_NAME VARCHAR2(255 CHAR) NOT NULL,
	ORIGINAL_NAME varchar2(255 CHAR) null,
	DESCRIPTION varchar2(255 CHAR) null,
	HANDLER_ID varchar2(50 CHAR) null,
	EXTERNAL_ID varchar2(50 CHAR) null,
	PRIMARY KEY (ID)
)
/
CREATE INDEX IX_B_FILE_EXTERNAL_ID ON b_file(EXTERNAL_ID)
/

CREATE OR REPLACE PROCEDURE DELFILE
(
	FILE_ID_OLD IN NUMBER,
	FILE_ID_NEW IN NUMBER
)
AS
BEGIN
	IF FILE_ID_OLD IS NOT NULL AND NVL(FILE_ID_OLD, 0) <> NVL(FILE_ID_NEW, 0) THEN
	DELETE FROM b_file WHERE ID=FILE_ID_OLD;
	END IF;
END;
/

CREATE TABLE b_lang
(
	LID CHAR(2 CHAR) NOT NULL,
	SORT NUMBER(18) DEFAULT ('100') NOT NULL,
	DEF CHAR(1 CHAR) DEFAULT ('N') NOT NULL,
	ACTIVE CHAR(1 CHAR) DEFAULT ('Y') NOT NULL,
	NAME VARCHAR2(50 CHAR) NOT NULL,
	DIR VARCHAR2(50 CHAR) NOT NULL,
	FORMAT_DATE VARCHAR2(50 CHAR) NULL,
	FORMAT_DATETIME VARCHAR2(50 CHAR) NULL,
	FORMAT_NAME VARCHAR2(255 CHAR) null,
	WEEK_START NUMBER(1) NULL,
	CHARSET VARCHAR2(255 CHAR) NULL,
	LANGUAGE_ID char(2 CHAR) default 'en' not null,
	DOC_ROOT varchar2(255 CHAR),
	DOMAIN_LIMITED char(1 CHAR) default 'N' not null,
	SERVER_NAME varchar2(255 CHAR) null,
	SITE_NAME varchar2(255 CHAR) null,
	EMAIL varchar2(255 CHAR),
	CULTURE_ID number(18),
	PRIMARY KEY (LID)
)
/

create table b_lang_domain
(
	LID char(2 CHAR) not null,
	DOMAIN varchar2(255 CHAR)not null,
	primary key (LID, DOMAIN)
)
/

create table b_site_template
(
	ID NUMBER(18) not null,
	SITE_ID char(2 CHAR) not null,
	CONDITION varchar2(255 CHAR) null,
	SORT NUMBER(18) default 500 not null,
	TEMPLATE varchar2(255 CHAR) not null,
	primary key (ID)
)
/
CREATE INDEX ix_site_template_site ON b_site_template(SITE_ID)
/
CREATE SEQUENCE SQ_b_site_template START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER b_site_template_insert
BEFORE INSERT
ON b_site_template
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_site_template.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

create table b_event_message_site
(
	EVENT_MESSAGE_ID NUMBER(18) not null,
	SITE_ID char(2 CHAR) not null,
	primary key(EVENT_MESSAGE_ID, SITE_ID)
)
/

create table b_language
(
	LID char(2 CHAR) not null,
	SORT NUMBER(18) default '100' not null,
	DEF char(1 CHAR) default 'N' not null,
	ACTIVE char(1 CHAR) default 'Y' not null,
	NAME varchar2(50 CHAR) not null,
	FORMAT_DATE varchar2(50 CHAR) null,
	FORMAT_DATETIME varchar2(50 CHAR) null,
	FORMAT_NAME varchar2(255 CHAR) null,
	WEEK_START NUMBER(1) NULL,
	CHARSET varchar2(255 CHAR) null,
	DIRECTION char(1 CHAR) null,
	CULTURE_ID number(18),
	primary key (LID)
)
/

create table b_culture
(
	ID NUMBER(18) not null,
	CODE varchar2(255 CHAR) null,
	NAME varchar2(255 CHAR) null,
	FORMAT_DATE varchar2(255 CHAR) null,
	FORMAT_DATETIME varchar2(255 CHAR) null,
	FORMAT_NAME varchar2(255 CHAR) null,
	WEEK_START NUMBER(1) DEFAULT 1 NULL,
	CHARSET varchar2(255 CHAR) null,
	DIRECTION char(1 CHAR) default 'Y' null,
	primary key (ID)
)
/
CREATE SEQUENCE sq_b_culture INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE TABLE b_event_type
(
	ID NUMBER(18) NOT NULL,
	LID CHAR(2 CHAR) NOT NULL,
	EVENT_NAME VARCHAR2(255 CHAR) NOT NULL,
	NAME VARCHAR2(100 CHAR) NULL,
	DESCRIPTION CLOB NULL,
	SORT NUMBER(18) DEFAULT '150' NOT NULL,
	PRIMARY KEY (ID)
)
/
CREATE UNIQUE INDEX ux_1 ON b_event_type(EVENT_NAME, LID)
/
CREATE SEQUENCE sq_b_event_type INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_event_type_insert
BEFORE INSERT
ON b_event_type
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_event_type.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE b_event_message
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	EVENT_NAME VARCHAR2(255 CHAR) NOT NULL,
	LID CHAR(2 CHAR) NULL,
	ACTIVE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	EMAIL_FROM VARCHAR2(255 CHAR) DEFAULT '#EMAIL_FROM#' NOT NULL,
	EMAIL_TO VARCHAR2(255 CHAR) DEFAULT '#EMAIL_TO#' NOT NULL,
	SUBJECT VARCHAR2(255 CHAR) NULL,
	MESSAGE CLOB NULL,
	MESSAGE_PHP CLOB NULL,
	BODY_TYPE VARCHAR2(4 CHAR) DEFAULT 'text' NOT NULL,
	BCC 		VARCHAR2(2000 CHAR) NULL,
	REPLY_TO 	varchar2(255 CHAR) NULL,
	CC		varchar2(255 CHAR) NULL,
	IN_REPLY_TO	varchar2(255 CHAR) NULL,
	PRIORITY	varchar2(50 CHAR) NULL,
	FIELD1_NAME	varchar2(50 CHAR) NULL,
	FIELD1_VALUE	varchar2(255 CHAR) NULL,
	FIELD2_NAME	varchar2(50 CHAR) NULL,
	FIELD2_VALUE	varchar2(255 CHAR) NULL,
	SITE_TEMPLATE_ID varchar(255 CHAR) DEFAULT NULL,
	ADDITIONAL_FIELD CLOB NULL,
	LANGUAGE_ID char(2 CHAR) NULL,
	PRIMARY KEY (ID),
	CONSTRAINT fk_b_event_mess_lid FOREIGN KEY (LID) REFERENCES b_lang(LID)
)
/
CREATE INDEX ix_b_event_message_name ON b_event_message (EVENT_NAME)
/
CREATE SEQUENCE sq_b_event_message INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_event_message_insert
BEFORE INSERT
ON b_event_message
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_event_message.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE OR REPLACE TRIGGER b_event_message_update
BEFORE UPDATE
ON b_event_message
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.TIMESTAMP_X IS NOT NULL THEN
	:NEW.TIMESTAMP_X := SYSDATE;
	END IF;
END;
/

CREATE TABLE b_event
(
	ID NUMBER(18) NOT NULL,
	EVENT_NAME VARCHAR2(255 CHAR) NOT NULL,
	MESSAGE_ID NUMBER(18) NULL,
	LID VARCHAR2(255 CHAR) NOT NULL,
	C_FIELDS CLOB NULL,
	DATE_INSERT DATE DEFAULT SYSDATE NOT NULL,
	DATE_EXEC DATE NULL,
	SUCCESS_EXEC CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	DUPLICATE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	LANGUAGE_ID char(2 CHAR) NULL,
	PRIMARY KEY (ID)
)
/
CREATE INDEX ix_success ON b_event(SUCCESS_EXEC)
/
CREATE INDEX ix_b_event_date_exec ON b_event(DATE_EXEC)
/
CREATE SEQUENCE sq_b_event INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_event_insert
BEFORE INSERT
ON b_event
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_event.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE b_event_attachment
(
  EVENT_ID NUMBER(18) not null,
  FILE_ID NUMBER(18) not null,
  IS_FILE_COPIED CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
  PRIMARY KEY (EVENT_ID, FILE_ID)
)
/

CREATE TABLE b_event_message_attachment
(
  EVENT_MESSAGE_ID NUMBER(18) not null,
  FILE_ID NUMBER(18) not null,
  PRIMARY KEY (EVENT_MESSAGE_ID, FILE_ID)
)
/

CREATE TABLE b_group
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	ACTIVE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	C_SORT NUMBER(18) DEFAULT 100 NOT NULL,
	ANONYMOUS CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	NAME VARCHAR2(255 CHAR) NOT NULL,
	DESCRIPTION VARCHAR2(255 CHAR) NULL,
	SECURITY_POLICY clob null,
	STRING_ID varchar2(255 CHAR) NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_group START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_group_insert
BEFORE INSERT
ON b_group
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_group.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE OR REPLACE TRIGGER b_group_update
BEFORE UPDATE
ON b_group
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.TIMESTAMP_X IS NOT NULL THEN
	:NEW.TIMESTAMP_X := SYSDATE;
	END IF;
END;
/

CREATE TABLE b_user
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	LOGIN VARCHAR2(50 CHAR) NOT NULL,
	"PASSWORD" VARCHAR2(50 CHAR) NOT NULL,
	CHECKWORD VARCHAR2(50 CHAR) NULL,
	ACTIVE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	NAME VARCHAR2(50 CHAR) NULL,
	LAST_NAME VARCHAR2(50 CHAR) NULL,
	EMAIL VARCHAR2(255 CHAR) NULL,
	LAST_LOGIN DATE NULL,
	DATE_REGISTER DATE DEFAULT SYSDATE NOT NULL,
	LID CHAR(2 CHAR) NULL,
	PERSONAL_PROFESSION VARCHAR2(255 CHAR) NULL,
	PERSONAL_WWW VARCHAR2(255 CHAR) NULL,
	PERSONAL_ICQ VARCHAR2(255 CHAR) NULL,
	PERSONAL_GENDER CHAR(1 CHAR) NULL,
	PERSONAL_BIRTHDATE VARCHAR2(50 CHAR) NULL,
	PERSONAL_PHOTO NUMBER(18) NULL,
	PERSONAL_PHONE VARCHAR2(255 CHAR) NULL,
	PERSONAL_FAX VARCHAR2(255 CHAR) NULL,
	PERSONAL_MOBILE VARCHAR2(255 CHAR) NULL,
	PERSONAL_PAGER VARCHAR2(255 CHAR) NULL,
	PERSONAL_STREET VARCHAR2(2000 CHAR) NULL,
	PERSONAL_MAILBOX VARCHAR2(255 CHAR) NULL,
	PERSONAL_CITY VARCHAR2(255 CHAR) NULL,
	PERSONAL_STATE VARCHAR2(255 CHAR) NULL,
	PERSONAL_ZIP VARCHAR2(255 CHAR) NULL,
	PERSONAL_COUNTRY VARCHAR2(255 CHAR) NULL,
	PERSONAL_NOTES VARCHAR2(2000 CHAR) NULL,
	WORK_COMPANY VARCHAR2(255 CHAR) NULL,
	WORK_DEPARTMENT VARCHAR2(255 CHAR) NULL,
	WORK_POSITION VARCHAR2(255 CHAR) NULL,
	WORK_WWW VARCHAR2(255 CHAR) NULL,
	WORK_PHONE VARCHAR2(255 CHAR) NULL,
	WORK_FAX VARCHAR2(255 CHAR) NULL,
	WORK_PAGER VARCHAR2(255 CHAR) NULL,
	WORK_STREET VARCHAR2(2000 CHAR) NULL,
	WORK_MAILBOX VARCHAR2(255 CHAR) NULL,
	WORK_CITY VARCHAR2(255 CHAR) NULL,
	WORK_STATE VARCHAR2(255 CHAR) NULL,
	WORK_ZIP VARCHAR2(255 CHAR) NULL,
	WORK_COUNTRY VARCHAR2(255 CHAR) NULL,
	WORK_PROFILE VARCHAR2(2000 CHAR) NULL,
	WORK_LOGO NUMBER(18) NULL,
	WORK_NOTES VARCHAR2(2000 CHAR) NULL,
	ADMIN_NOTES VARCHAR2(2000 CHAR) NULL,
	STORED_HASH varchar2(32 CHAR) null,
	XML_ID varchar2(255 CHAR) null,
	PERSONAL_BIRTHDAY DATE NULL,
	EXTERNAL_AUTH_ID varchar2(255 CHAR) null,
	CHECKWORD_TIME date null,
	SECOND_NAME VARCHAR2(50 CHAR) NULL,
	CONFIRM_CODE varchar2(8 CHAR) NULL,
	LOGIN_ATTEMPTS NUMBER(18) NULL,
	LAST_ACTIVITY_DATE date null,
	AUTO_TIME_ZONE char(1 CHAR) null,
	TIME_ZONE varchar2(50 CHAR) null,
	TIME_ZONE_OFFSET number(18) null,
	TITLE varchar2(255 char) null,
	BX_USER_ID varchar2(32 char) null,
	LANGUAGE_ID char(2 char) null,
	PRIMARY KEY (ID)
)
/
CREATE UNIQUE INDEX ux_login ON b_user(LOGIN, EXTERNAL_AUTH_ID)
/
CREATE INDEX ix_b_user_email ON b_user(EMAIL)
/
CREATE INDEX IX_B_USER_ACTIVITY_DATE ON b_user(LAST_ACTIVITY_DATE)
/
CREATE INDEX IX_B_USER_XML_ID ON b_user(XML_ID)
/

CREATE SEQUENCE sq_b_user START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_USER_DELETE
BEFORE DELETE
ON B_USER
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	DELFILE(:OLD.PERSONAL_PHOTO, NULL);
	DELFILE(:OLD.WORK_LOGO, NULL);
END;
/

CREATE OR REPLACE TRIGGER b_user_insert
BEFORE INSERT
ON b_user
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_user.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE OR REPLACE TRIGGER b_user_update
BEFORE UPDATE
ON b_user
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.TIMESTAMP_X IS NOT NULL AND :NEW.LAST_LOGIN=:OLD.LAST_LOGIN THEN
	:NEW.TIMESTAMP_X := SYSDATE;
	ELSE
	:NEW.TIMESTAMP_X := :OLD.TIMESTAMP_X;
	END IF;
	DELFILE(:OLD.PERSONAL_PHOTO, :NEW.PERSONAL_PHOTO);
	DELFILE(:OLD.WORK_LOGO, :NEW.WORK_LOGO);
END;
/

CREATE TABLE b_user_group
(
	USER_ID NUMBER(18) NOT NULL,
	GROUP_ID NUMBER(18) NOT NULL,
	DATE_ACTIVE_FROM DATE NULL,
	DATE_ACTIVE_TO DATE NULL,
	CONSTRAINT fk_b_ug_user FOREIGN KEY (USER_ID) REFERENCES B_USER (ID),
	CONSTRAINT fk_b_ug_group FOREIGN KEY (GROUP_ID) REFERENCES B_GROUP (ID)
)
/
CREATE UNIQUE INDEX ux_user_group ON b_user_group (USER_ID, GROUP_ID)
/
CREATE INDEX ix_user_group_group ON b_user_group (GROUP_ID)
/


CREATE TABLE b_user_field_confirm
(
	ID NUMBER(18) NOT NULL,
	USER_ID NUMBER(18) NOT NULL,
	DATE_CHANGE DATE DEFAULT SYSDATE NOT NULL,
	FIELD VARCHAR2(255 CHAR) NOT NULL,
	FIELD_VALUE VARCHAR2(255 CHAR) NOT NULL,
	CONFIRM_CODE VARCHAR2(32 CHAR) NOT NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_user_field_confirm INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_user_field_confirm_insert
BEFORE INSERT
ON b_user_field_confirm
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_user_field_confirm.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX ix_b_user_field_confirm1 ON b_user_field_confirm (USER_ID, CONFIRM_CODE)
/


CREATE TABLE b_module
(
	ID VARCHAR2(50 CHAR) NOT NULL,
	DATE_ACTIVE DATE DEFAULT SYSDATE NOT NULL,
	PRIMARY KEY (ID)
)
/
CREATE TABLE b_agent
(
	ID NUMBER(18) NOT NULL,
	MODULE_ID VARCHAR2(50 CHAR) NULL,
	SORT NUMBER(18) DEFAULT 100 NOT NULL,
	NAME VARCHAR2(2000 CHAR) NULL,
	ACTIVE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	LAST_EXEC DATE NULL,
	NEXT_EXEC DATE NOT NULL,
	DATE_CHECK DATE NULL,
	AGENT_INTERVAL NUMBER(18) DEFAULT '86400' NULL,
	IS_PERIOD CHAR(1 CHAR) DEFAULT 'Y' NULL,
	USER_ID NUMBER(18,0) DEFAULT NULL,
	RUNNING CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT fk_b_agent_module FOREIGN KEY (MODULE_ID) REFERENCES b_module(ID)
)
/
CREATE INDEX ix_act_next_exec ON b_agent(ACTIVE, NEXT_EXEC)
/
CREATE INDEX ix_agent_user_id ON b_agent(USER_ID)
/
CREATE SEQUENCE sq_b_agent INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_agent_insert
BEFORE INSERT
ON b_agent
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_agent.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/


CREATE TABLE b_option
(
	MODULE_ID VARCHAR2(50 CHAR),
	NAME VARCHAR2(50 CHAR) NOT NULL,
	VALUE VARCHAR2(2000 CHAR),
	DESCRIPTION VARCHAR2(255 CHAR),
	SITE_ID CHAR(2 CHAR)
)
/
CREATE UNIQUE INDEX ix_option ON b_option(MODULE_ID, NAME, SITE_ID)
/
CREATE INDEX ix_option_name ON b_option(NAME)
/

CREATE TABLE B_MODULE_TO_MODULE
(
	ID NUMBER(18) NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	SORT NUMBER(18) DEFAULT 100 NOT NULL,
	FROM_MODULE_ID VARCHAR2(50 CHAR) NOT NULL,
	MESSAGE_ID VARCHAR2(255 CHAR) NOT NULL,
	TO_MODULE_ID VARCHAR2(50 CHAR) NOT NULL,
	TO_PATH VARCHAR2(255 CHAR) NULL,
	TO_CLASS VARCHAR2(255 CHAR) NULL,
	TO_METHOD VARCHAR2(255 CHAR) NULL,
	TO_METHOD_ARG VARCHAR2(255 CHAR) NULL,
	VERSION NUMBER(18) null,
	CONSTRAINT PK_B_MODULE_TO_MODULE PRIMARY KEY (ID)
)
/
CREATE INDEX IX_MODULE_TO_MODULE ON B_MODULE_TO_MODULE(FROM_MODULE_ID,MESSAGE_ID,TO_MODULE_ID,TO_CLASS,TO_METHOD)
/
CREATE SEQUENCE SQ_B_MODULE_TO_MODULE INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_MODULE_TO_MODULE_INSERT
BEFORE INSERT
ON B_MODULE_TO_MODULE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT SQ_B_MODULE_TO_MODULE.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE OR REPLACE TRIGGER B_MODULE_TO_MODULE_UPDATE
BEFORE UPDATE
ON B_MODULE_TO_MODULE
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.TIMESTAMP_X IS NOT NULL THEN
	:NEW.TIMESTAMP_X := SYSDATE;
	END IF;
END;

/

CREATE SEQUENCE sq_b_file INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER b_file_insert
BEFORE INSERT
ON b_file
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_file.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE OR REPLACE TRIGGER b_file_update
BEFORE UPDATE
ON b_file
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.TIMESTAMP_X IS NOT NULL THEN
	:NEW.TIMESTAMP_X := SYSDATE;
	END IF;
END;
/

CREATE TABLE b_file_action
(
	ID NUMBER(18) NOT NULL,
	FILE_NAME VARCHAR2(255 CHAR) NOT NULL,
	SUBDIR VARCHAR2(255 CHAR) NULL,
	FILE_ACTION VARCHAR2(50 CHAR) NULL,
	DATE_INSERT DATE DEFAULT SYSDATE NOT NULL,
	DATE_EXEC DATE NULL,
	SUCCESS_EXEC CHAR(1 CHAR) NULL,
	DATE_REQUEST DATE NULL,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE sq_b_file_action INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER b_file_action_insert
BEFORE INSERT
ON b_file_action
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_file_action.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE OR REPLACE TRIGGER b_file_delete
BEFORE DELETE
ON b_file
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO b_file_action (FILE_NAME, SUBDIR, FILE_ACTION)
	VALUES(:OLD.FILE_NAME, :OLD.SUBDIR, 'DELETE');
END;
/


CREATE TABLE B_MODULE_GROUP
(
	ID NUMBER(18) NOT NULL,
	MODULE_ID VARCHAR2(50 CHAR) NOT NULL,
	GROUP_ID NUMBER(18) NOT NULL,
	G_ACCESS VARCHAR2(255 CHAR) NOT NULL,
	SITE_ID CHAR(2 CHAR),
	PRIMARY KEY (ID)
)
/
CREATE UNIQUE INDEX UK_GROUP_MODULE ON B_MODULE_GROUP(MODULE_ID,GROUP_ID,SITE_ID)
/
CREATE SEQUENCE SQ_B_MODULE_GROUP START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER B_MODULE_GROUP_INSERT
BEFORE INSERT
ON B_MODULE_GROUP
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT SQ_B_MODULE_GROUP.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_FAVORITE
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE NULL,
	DATE_CREATE DATE NULL,
	C_SORT NUMBER(18) DEFAULT 100 NOT NULL,
	MODIFIED_BY NUMBER(18) NULL,
	CREATED_BY NUMBER(18) NULL,
	MODULE_ID VARCHAR2(50 CHAR) DEFAULT NULL NULL,
	NAME VARCHAR2(255 CHAR) NULL,
	URL VARCHAR2(2000 CHAR) NULL,
	COMMENTS VARCHAR2(2000 CHAR) NULL,
	LANGUAGE_ID CHAR(2 CHAR) NULL,
	USER_ID NUMBER(18) NULL,
	CODE_ID NUMBER(18) NULL,
	MENU_ID VARCHAR2(255 CHAR) NULL,
	COMMON CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_FAVORITE START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE NOCYCLE NOCACHE NOORDER
/




create table b_user_stored_auth
(
	ID NUMBER(18) NOT NULL,
	USER_ID NUMBER(18) not null,
	DATE_REG DATE not null,
	LAST_AUTH DATE not null,
	STORED_HASH varchar2(32 CHAR) not null,
	TEMP_HASH char(1 CHAR) default ('N') not null ,
	IP_ADDR NUMBER(18) not null,
	primary key(id)
)
/
CREATE SEQUENCE sq_b_user_stored_auth START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER sq_b_user_stored_auth_insert
BEFORE INSERT
ON b_user_stored_auth
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_user_stored_auth.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE INDEX ux_user_hash ON b_user_stored_auth(USER_ID)
/

CREATE TABLE B_USER_OPTION
(
	ID NUMBER(18) NOT NULL,
	USER_ID NUMBER(18) NOT NULL,
	CATEGORY VARCHAR2(50 CHAR) NOT NULL,
	NAME VARCHAR2(255 CHAR) NOT NULL,
	VALUE CLOB,
	COMMON char(1 CHAR) default ('N') not null
)
/
ALTER TABLE B_USER_OPTION ADD CONSTRAINT PK_USER_OPTION PRIMARY KEY(ID)
/
CREATE UNIQUE INDEX UX_USER_CATEGORY_NAME ON B_USER_OPTION (USER_ID, CATEGORY, NAME)
/
CREATE SEQUENCE SQ_B_USER_OPTION INCREMENT BY 1 START WITH 1
/

CREATE TABLE B_CAPTCHA
(
	ID VARCHAR2(32 CHAR) NOT NULL,
	CODE VARCHAR2(20 CHAR) NOT NULL,
	IP VARCHAR2(15 CHAR) NOT NULL,
	DATE_CREATE DATE NOT NULL
)
/
CREATE UNIQUE INDEX UX_B_CAPTCHA ON B_CAPTCHA(ID)
/

CREATE TABLE B_USER_FIELD
(
	ID NUMBER(18) NOT NULL,
	ENTITY_ID varchar2(20 CHAR),
	FIELD_NAME varchar2(20 CHAR),
	USER_TYPE_ID varchar2(50 CHAR),
	XML_ID varchar2(255 CHAR),
	SORT NUMBER(18),
	MULTIPLE char(1 CHAR) default 'N' not null,
	MANDATORY char(1 CHAR) default 'N' not null,
	SHOW_FILTER char(1 CHAR) default 'N' not null,
	SHOW_IN_LIST char(1 CHAR) default 'Y' not null,
	EDIT_IN_LIST char(1 CHAR) default 'Y' not null,
	IS_SEARCHABLE char(1 CHAR) default 'N' not null,
	SETTINGS CLOB
)
/
ALTER TABLE B_USER_FIELD ADD CONSTRAINT PK_USER_FIELD PRIMARY KEY(ID)
/
CREATE UNIQUE INDEX UX_B_USER_FIELD ON B_USER_FIELD(ENTITY_ID, FIELD_NAME)
/
CREATE SEQUENCE SQ_B_USER_FIELD INCREMENT BY 1 START WITH 1
/

CREATE TABLE B_USER_FIELD_LANG
(
	USER_FIELD_ID NUMBER(18) NOT NULL,
	LANGUAGE_ID char(2 CHAR) not null,
	EDIT_FORM_LABEL varchar2(255 CHAR),
	LIST_COLUMN_LABEL varchar2(255 CHAR),
	LIST_FILTER_LABEL varchar2(255 CHAR),
	ERROR_MESSAGE varchar2(255 CHAR),
	HELP_MESSAGE varchar2(255 CHAR)
)
/
ALTER TABLE B_USER_FIELD_LANG ADD CONSTRAINT PK_USER_FIELD_LANG PRIMARY KEY(USER_FIELD_ID, LANGUAGE_ID)
/
ALTER TABLE B_USER_FIELD_LANG ADD CONSTRAINT FK_B_USER_FIELD_LANG FOREIGN KEY (USER_FIELD_ID) REFERENCES B_USER_FIELD(ID)
/
CREATE SEQUENCE SQ_B_USER_FIELD_LANG INCREMENT BY 1 START WITH 1
/

CREATE TABLE B_USER_FIELD_ENUM
(
	ID NUMBER(18) NOT NULL,
	USER_FIELD_ID NUMBER(18) NOT NULL,
	VALUE VARCHAR2(255 CHAR) NOT NULL,
	DEF CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	SORT NUMBER(18) DEFAULT 500 NOT NULL,
	XML_ID VARCHAR2(255 CHAR) NOT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT FK_B_USER_FIELD_ENUM FOREIGN KEY (USER_FIELD_ID) REFERENCES B_USER_FIELD(ID)
)
/
CREATE SEQUENCE SQ_B_USER_FIELD_ENUM INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_USER_FIELD_ENUM_INSERT
BEFORE INSERT
ON B_USER_FIELD_ENUM
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT SQ_B_USER_FIELD_ENUM.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE UNIQUE INDEX UX_USER_FIELD_ENUM ON B_USER_FIELD_ENUM(USER_FIELD_ID, XML_ID)
/

CREATE TABLE b_task(
	ID number(18) not null,
	NAME varchar2(100 CHAR) not null,
	LETTER char(1 CHAR),
	MODULE_ID varchar2(50 CHAR) not null,
	SYS char(1 CHAR) not null,
	DESCRIPTION varchar2(255 CHAR),
	BINDING varchar2(50 CHAR) default 'module',
	primary key (ID)
)
/
CREATE INDEX ix_task ON b_task(MODULE_ID, BINDING, LETTER, SYS)
/
CREATE SEQUENCE SQ_B_TASK INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER b_task_insert
BEFORE INSERT ON b_task
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT SQ_B_TASK.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE b_group_task(
	GROUP_ID number(18) not null,
	TASK_ID number(18) not null,
	EXTERNAL_ID varchar2(50 CHAR) DEFAULT '',
	primary key (GROUP_ID,TASK_ID)
)
/
CREATE TABLE b_operation(
	ID number(18) not null,
	NAME varchar2(50 CHAR) not null,
	MODULE_ID varchar2(50 CHAR) not null,
	DESCRIPTION varchar2(255 CHAR),
	BINDING varchar2(50 CHAR) default 'module',
	primary key (ID)
)
/


CREATE SEQUENCE SQ_B_OPERATION INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER b_operation_insert
BEFORE INSERT ON b_operation
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT SQ_B_OPERATION.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE b_task_operation(
	TASK_ID number(18) not null,
	OPERATION_ID number(18) not null,
	primary key (TASK_ID,OPERATION_ID)
)
/
CREATE TABLE b_group_subordinate(
	ID number(18) not null,
	AR_SUBGROUP_ID varchar2(2000 CHAR) not null,
	primary key (ID)
)
/

CREATE TABLE B_RATING (
	ID number(11) not null,
	ACTIVE CHAR(1 CHAR) default 'N' not null,
	NAME VARCHAR2(512 CHAR) not null,
	ENTITY_ID VARCHAR2(50 CHAR) not null,
	CALCULATION_METHOD VARCHAR2(3 CHAR)  default 'SUM' not null,
	CREATED date null,
	LAST_MODIFIED date null,
	LAST_CALCULATED date null,
	CALCULATED CHAR(1 CHAR) default 'N' not null,
	POSITION CHAR(1 CHAR) default 'N' null,
	AUTHORITY CHAR(1 CHAR) default 'N' null,
	CONFIGS clob,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING
/

CREATE OR REPLACE TRIGGER B_RATING_insert
BEFORE INSERT
ON B_RATING
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_RATING_COMPONENT (
	ID number(11) not null,
	RATING_ID number(11) not null,
	ACTIVE CHAR(1 CHAR) default 'N' not null,
	ENTITY_ID VARCHAR2(50 CHAR) not null,
	MODULE_ID VARCHAR2(50 CHAR) not null,
	RATING_TYPE VARCHAR2(50 CHAR) not null,
	NAME VARCHAR2(50 CHAR) not null,
	COMPLEX_NAME VARCHAR2(200 CHAR) not null,
	CLASS VARCHAR2(255 CHAR) not null,
	CALC_METHOD VARCHAR2(255 CHAR) not null,
	EXCEPTION_METHOD VARCHAR2(255 CHAR) null,
	LAST_MODIFIED date null,
	LAST_CALCULATED date null,
	NEXT_CALCULATION date null,
	REFRESH_INTERVAL number(11) not null,
	CONFIG clob,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING_COMPONENT
/

CREATE OR REPLACE TRIGGER B_RAT_COMP_insert
BEFORE INSERT
ON B_RATING_COMPONENT
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING_COMPONENT.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE INDEX IX_B_RAT_COMP ON B_RATING_COMPONENT (RATING_ID, ACTIVE, NEXT_CALCULATION)
/

CREATE TABLE B_RATING_COMPONENT_RESULTS (
	ID number(11) not null,
	RATING_ID number(11) not null,
	ENTITY_TYPE_ID VARCHAR2(50 CHAR) not null,
	ENTITY_ID number(11) not null,
	MODULE_ID VARCHAR2(50 CHAR) not null,
	RATING_TYPE VARCHAR2(50 CHAR) not null,
	NAME VARCHAR2(50 CHAR) not null,
	COMPLEX_NAME VARCHAR2(200 CHAR) not null,
	CURRENT_VALUE NUMBER(18, 4) default 0 null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING_COMPONENT_RESULTS
/

CREATE OR REPLACE TRIGGER B_RAT_COMP_RES_insert
BEFORE INSERT
ON B_RATING_COMPONENT_RESULTS
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING_COMPONENT_RESULTS.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE INDEX IX_B_RAT_COMP_RES_1 ON B_RATING_COMPONENT_RESULTS (RATING_ID, COMPLEX_NAME)
/
CREATE INDEX IX_B_RAT_COMP_RES_2 ON B_RATING_COMPONENT_RESULTS (ENTITY_TYPE_ID)
/
CREATE INDEX IX_B_RAT_COMP_RES_3 ON B_RATING_COMPONENT_RESULTS (COMPLEX_NAME)
/

CREATE TABLE B_RATING_RESULTS (
	ID number(11) not null,
	RATING_ID number(11) not null,
	ENTITY_TYPE_ID VARCHAR2(50 CHAR) not null,
	ENTITY_ID number(11) not null,
	CURRENT_VALUE NUMBER(18, 4) default 0 null,
	PREVIOUS_VALUE NUMBER(18, 4) default 0 null,
	CURRENT_POSITION NUMBER(11) default 0 null,
	PREVIOUS_POSITION NUMBER(11) default 0 null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING_RESULTS
/

CREATE OR REPLACE TRIGGER B_RAT_RES_insert
BEFORE INSERT
ON B_RATING_RESULTS
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING_RESULTS.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_RAT_RES_1 ON B_RATING_RESULTS (RATING_ID, ENTITY_TYPE_ID, ENTITY_ID)
/
CREATE INDEX IX_B_RAT_RES_2 ON B_RATING_RESULTS (RATING_ID, ENTITY_ID)
/

CREATE TABLE B_RATING_VOTE (
	ID number(11) not null,
	RATING_VOTING_ID number(11) not null,
	ENTITY_TYPE_ID varchar2(50 char) not null,
	ENTITY_ID number(11) not null,
	OWNER_ID number(11) not null,
	VALUE NUMBER(18, 4) default 0 not null,
	ACTIVE CHAR(1 CHAR) default 'N' not null,
	CREATED date null,
	USER_ID number(11) default 0  not null,
	USER_IP VARCHAR2(64 CHAR) not null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING_VOTE
/

CREATE OR REPLACE TRIGGER B_RAT_VOTE_insert
BEFORE INSERT
ON B_RATING_VOTE
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING_VOTE.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_RAT_VOTE ON B_RATING_VOTE (RATING_VOTING_ID, USER_ID)
/
CREATE INDEX IX_B_RAT_VOTE_2 ON B_RATING_VOTE (ENTITY_TYPE_ID, ENTITY_ID, USER_ID)
/
CREATE INDEX IX_B_RAT_VOTE_3 ON B_RATING_VOTE (OWNER_ID, CREATED)
/
CREATE INDEX IX_B_RAT_VOTE_4 ON B_RATING_VOTE (USER_ID)
/
CREATE INDEX IX_B_RAT_VOTE_5 ON B_RATING_VOTE (CREATED, VALUE)
/
CREATE INDEX IX_B_RAT_VOTE_6 ON B_RATING_VOTE (ACTIVE)
/
CREATE INDEX IX_B_RAT_VOTE_7 ON B_RATING_VOTE (RATING_VOTING_ID, CREATED)
/
CREATE INDEX IX_B_RAT_VOTE_8 ON B_RATING_VOTE (ENTITY_TYPE_ID, CREATED)
/
CREATE INDEX IX_B_RAT_VOTE_9 ON B_RATING_VOTE (CREATED, USER_ID)
/

CREATE TABLE B_RATING_VOTING (
	ID number(11) not null,
	ENTITY_TYPE_ID VARCHAR2(50 CHAR) not null,
	ENTITY_ID number(11) not null,
	OWNER_ID number(11) not null,
	ACTIVE CHAR(1 CHAR) default 'N' not null,
	CREATED date null,
	LAST_CALCULATED date null,
	TOTAL_VALUE NUMBER(18, 4) default 0 not null,
	TOTAL_VOTES number(11) default 0  not null,
	TOTAL_POSITIVE_VOTES number(11) default 0  not null,
	TOTAL_NEGATIVE_VOTES number(11) default 0  not null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING_VOTING
/

CREATE OR REPLACE TRIGGER B_RAT_VOTING_insert
BEFORE INSERT
ON B_RATING_VOTING
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING_VOTING.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_RAT_VOTING ON B_RATING_VOTING (ENTITY_TYPE_ID, ENTITY_ID, ACTIVE)
/
CREATE INDEX IX_ENTITY_TYPE_ID_4 ON B_RATING_VOTING (TOTAL_VALUE)
/

CREATE TABLE B_RATING_VOTING_PREPARE (
	ID number(11) not null,
	RATING_VOTING_ID number(11) not null,
	TOTAL_VALUE NUMBER(18, 4) default 0 not null,
	TOTAL_VOTES number(11) default 0  not null,
	TOTAL_POSITIVE_VOTES number(11) default 0  not null,
	TOTAL_NEGATIVE_VOTES number(11) default 0  not null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING_VOTING_PREPARE
/

CREATE OR REPLACE TRIGGER B_RAT_VOTING_PREPARE_insert
BEFORE INSERT
ON B_RATING_VOTING_PREPARE
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING_VOTING_PREPARE.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_RAT_VOTING_PR ON B_RATING_VOTING_PREPARE (RATING_VOTING_ID)
/

CREATE TABLE B_RATING_PREPARE (
	ID number(11) null
)
/

CREATE TABLE B_RATING_RULE (
	ID number(11) not null,
	ACTIVE CHAR(1 CHAR) default 'N' not null,
	NAME VARCHAR2(256 CHAR) not null,
	ENTITY_TYPE_ID VARCHAR2(50 CHAR) not null,
	CONDITION_NAME VARCHAR2(200 CHAR) not null,
	CONDITION_MODULE VARCHAR2(50 CHAR) null,
	CONDITION_CLASS VARCHAR2(255 CHAR) not null,
	CONDITION_METHOD VARCHAR2(255 CHAR) not null,
	CONDITION_CONFIG clob,
	ACTION_NAME VARCHAR2(200 CHAR) not null,
	ACTION_CONFIG clob,
	ACTIVATE CHAR(1 CHAR) default 'N' not null,
	ACTIVATE_CLASS VARCHAR2(255 CHAR) not null,
	ACTIVATE_METHOD VARCHAR2(255 CHAR) not null,
	DEACTIVATE CHAR(1 CHAR) default 'N' not null,
	DEACTIVATE_CLASS VARCHAR2(255 CHAR) not null,
	DEACTIVATE_METHOD VARCHAR2(255 CHAR) not null,
	CREATED date null,
	LAST_MODIFIED date null,
	LAST_APPLIED date null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING_RULE
/

CREATE OR REPLACE TRIGGER B_RR_insert
BEFORE INSERT
ON B_RATING_RULE
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING_RULE.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/


CREATE TABLE B_RATING_RULE_VETTING (
	ID number(11) not null,
	RULE_ID number(11) not null,
	ENTITY_TYPE_ID VARCHAR2(50 CHAR) not null,
	ENTITY_ID number(11) not null,
	ACTIVATE CHAR(1 CHAR) default 'N' not null,
	APPLIED CHAR(1 CHAR) default 'N' not null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING_RULE_VETTING
/

CREATE OR REPLACE TRIGGER B_RRV_insert
BEFORE INSERT
ON B_RATING_RULE_VETTING
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING_RULE_VETTING.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_RRV ON B_RATING_RULE_VETTING (RULE_ID, ENTITY_TYPE_ID, ENTITY_ID)
/
CREATE TABLE B_RATING_USER (
	ID number(11) not null,
	RATING_ID number(11) not null,
	ENTITY_ID number(11) not null,
	BONUS NUMBER(18, 4) default 0 null,
	VOTE_WEIGHT NUMBER(18, 4) default 0 null,
	VOTE_COUNT number(11) default 0  null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING_USER
/

CREATE OR REPLACE TRIGGER B_RAT_USER_insert
BEFORE INSERT
ON B_RATING_USER
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING_USER.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_RAT_USER ON B_RATING_USER (RATING_ID, ENTITY_ID)
/
CREATE INDEX IX_B_RAT_USER_2 ON B_RATING_USER(ENTITY_ID)
/

CREATE TABLE B_RATING_WEIGHT (
	ID number(11) not null,
	RATING_FROM number(18,4) not null,
	RATING_TO number(18,4) not null,
	WEIGHT number(18,4) default '0' null,
	COUNT number(11)  default '0' null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING_WEIGHT
/

CREATE OR REPLACE TRIGGER B_RAT_WEIGHT_insert
BEFORE INSERT
ON B_RATING_WEIGHT
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING_WEIGHT.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
insert into B_RATING_WEIGHT (RATING_FROM, RATING_TO, WEIGHT, COUNT) VALUES (-1000000, 1000000, 1, 10)
/
CREATE TABLE B_RATING_VOTE_GROUP (
	ID number(11) not null,
	GROUP_ID number(11) not null,
	TYPE CHAR(1 CHAR) not null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_RATING_VOTE_GROUP
/

CREATE OR REPLACE TRIGGER B_RAT_VOTE_GROUP_insert
BEFORE INSERT
ON B_RATING_VOTE_GROUP
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_RATING_VOTE_GROUP.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_B_RAT_VOTE_GROUP ON B_RATING_VOTE_GROUP (GROUP_ID, TYPE)
/

CREATE TABLE b_event_log
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE default sysdate not null,
	SEVERITY VARCHAR2(50 CHAR) not null,
	AUDIT_TYPE_ID VARCHAR2(50 CHAR) not null,
	MODULE_ID VARCHAR2(50 CHAR) not null,
	ITEM_ID VARCHAR2(255 CHAR) not null,
	REMOTE_ADDR VARCHAR2(40 CHAR),
	USER_AGENT VARCHAR2(2000 CHAR),
	REQUEST_URI VARCHAR2(2000 CHAR),
	SITE_ID CHAR(2 CHAR),
	USER_ID NUMBER(18),
	GUEST_ID NUMBER(18),
	DESCRIPTION CLOB,
	PRIMARY KEY (ID)
)
/
CREATE INDEX ix_b_event_log_time ON b_event_log(TIMESTAMP_X)
/
CREATE SEQUENCE SQ_b_event_log
/
CREATE OR REPLACE TRIGGER b_event_log_insert
BEFORE INSERT
ON b_event_log
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_event_log.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE b_cache_tag
(
	SITE_ID CHAR(2 CHAR),
	CACHE_SALT CHAR(4 CHAR),
	RELATIVE_PATH VARCHAR2(255 CHAR),
	TAG VARCHAR2(100 CHAR)
)
/
CREATE INDEX ix_b_cache_tag_0 ON b_cache_tag (SITE_ID, CACHE_SALT, RELATIVE_PATH)
/
CREATE INDEX ix_b_cache_tag_1 ON b_cache_tag (TAG)
/

CREATE TABLE b_user_hit_auth
(
	ID NUMBER(18) NOT NULL,
	USER_ID NUMBER(18) NOT NULL,
	HASH VARCHAR2(32 CHAR) NOT NULL,
	URL VARCHAR2(255 CHAR) NOT NULL,
	SITE_ID char(2 CHAR) NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	PRIMARY KEY (ID)
)
/
CREATE INDEX IX_USER_HIT_AUTH_1 ON b_user_hit_auth(HASH)
/
CREATE INDEX IX_USER_HIT_AUTH_2 ON b_user_hit_auth(USER_ID)
/
CREATE INDEX IX_USER_HIT_AUTH_3 ON b_user_hit_auth(TIMESTAMP_X)
/
CREATE SEQUENCE sq_b_user_hit_auth START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_user_hit_auth
BEFORE INSERT
ON b_user_hit_auth
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_user_hit_auth.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE b_undo
(
	ID VARCHAR2(255 CHAR) NOT NULL,
	MODULE_ID VARCHAR2(50 CHAR) NULL,
	UNDO_TYPE VARCHAR2(50 CHAR) NULL,
	UNDO_HANDLER VARCHAR2(255 CHAR) NULL,
	CONTENT CLOB NULL,
	USER_ID NUMBER(18) NULL,
	TIMESTAMP_X NUMBER(18) NULL,
	primary key (ID)
)
/

CREATE TABLE b_user_digest
(
	USER_ID NUMBER(18) NOT NULL,
	DIGEST_HA1 VARCHAR2(32 CHAR) NOT NULL,
	PRIMARY KEY (USER_ID)
)
/

CREATE TABLE B_CHECKLIST (
	ID number(11) not null,
	DATE_CREATE VARCHAR2(255 CHAR) null,
	TESTER VARCHAR2(255 CHAR) NULL,
	COMPANY_NAME  VARCHAR2(255 CHAR) NULL,
	PICTURE number(11) NULL,
	TOTAL number(11) default 0 not null,
	SUCCESS number(11) default 0 not null,
	FAILED number(11) default 0 not null,
	PENDING number(11) default 0 not null,
	SKIP number(11) default 0 not null,
	STATE CLOB,
	REPORT_COMMENT VARCHAR2(255 CHAR),
	REPORT CHAR(1 CHAR) NULL,
	EMAIL VARCHAR2(50 CHAR) NULL,
	PHONE VARCHAR2(50 CHAR) NULL,
	SENDED_TO_BITRIX char(1 CHAR) default 'N' null,
	HIDDEN char(1 CHAR) default 'N' null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_CHECKLIST
/

CREATE OR REPLACE TRIGGER B_CHECKLIST_insert
BEFORE INSERT
ON B_CHECKLIST
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_CHECKLIST.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_SHORT_URI (
	ID number(11) not null,
	URI varchar2(250 CHAR) not null,
	URI_CRC number(11) not null,
	SHORT_URI varchar2(250 CHAR) not null,
	SHORT_URI_CRC number(11) not null,
	STATUS number(11) default 301 not null,
	MODIFIED DATE not null,
	LAST_USED DATE null,
	NUMBER_USED number(11) default 0 not null,
	PRIMARY KEY (ID)
)
/
CREATE INDEX UX_B_SHORT_URI_1 ON B_SHORT_URI(SHORT_URI_CRC)
/
CREATE INDEX UX_B_SHORT_URI_2 ON B_SHORT_URI(URI_CRC)
/

CREATE SEQUENCE SQ_B_SHORT_URI
/

CREATE OR REPLACE TRIGGER B_SHORT_URI_insert
BEFORE INSERT
ON B_SHORT_URI
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_SHORT_URI.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_USER_ACCESS
(
	USER_ID NUMBER(18),
	PROVIDER_ID varchar2(50 char),
	ACCESS_CODE varchar2(100 char)
)
/
CREATE INDEX ix_ua_user_provider ON B_USER_ACCESS(USER_ID, PROVIDER_ID)
/
CREATE INDEX ix_ua_user_access ON B_USER_ACCESS(USER_ID, ACCESS_CODE)
/
CREATE INDEX ix_ua_access ON B_USER_ACCESS(ACCESS_CODE)
/
insert into b_user_access (USER_ID, PROVIDER_ID, ACCESS_CODE) values(0, 'group', 'G2')
/

CREATE TABLE B_USER_ACCESS_CHECK
(
	USER_ID NUMBER(18),
	PROVIDER_ID varchar2(50 char)
)
/
CREATE INDEX ix_uac_user_provider ON B_USER_ACCESS_CHECK(USER_ID, PROVIDER_ID)
/

CREATE TABLE B_USER_COUNTER
(
	USER_ID NUMBER(18) not null,
	SITE_ID char(2 CHAR) default ('**') not null,
	CODE varchar2(50 CHAR) not null,
	CNT NUMBER(18) default ('0') not null,
	LAST_DATE date,
	TIMESTAMP_X date default (TO_DATE('3000-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')) not null,
	TAG VARCHAR2(255 CHAR) NULL,
	PARAMS clob NULL,
	SENT char(1 CHAR) default '0' null,
	CONSTRAINT PK_B_USER_COUNTER PRIMARY KEY (USER_ID, SITE_ID, CODE)
)
/
CREATE INDEX ix_buc_tag ON B_USER_COUNTER(TAG)
/
CREATE INDEX ix_buc_code ON B_USER_COUNTER(CODE)
/
CREATE INDEX ix_buc_ts ON B_USER_COUNTER(TIMESTAMP_X)
/
CREATE INDEX ix_buc_sent_userid ON B_USER_COUNTER(SENT, USER_ID)
/

CREATE TABLE B_HOT_KEYS_CODE
(
  ID NUMBER(18) NOT NULL ,
  CLASS_NAME varchar2(50 char) NULL,
  CODE varchar2(255 char) NULL,
  NAME varchar2(255 char) NULL,
  COMMENTS varchar2(255 char) NULL,
  TITLE_OBJ varchar2(50 char) NULL,
  URL varchar2(255 char) NULL,
  IS_CUSTOM NUMBER(1) DEFAULT 1 NOT NULL ,
  PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_HOT_KEYS_CODE START WITH 140 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE INDEX ix_hot_keys_code_cn ON B_HOT_KEYS_CODE(CLASS_NAME)
/
CREATE INDEX ix_hot_keys_code_url ON B_HOT_KEYS_CODE(URL)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(3, 'CAdminTabControl', 'NextTab();', 'HK_DB_CADMINTC', 'HK_DB_CADMINTC_C', 'tab-container', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(5, 'btn_new', 'var d=BX (''btn_new''); if (d) location.href = d.href;', 'HK_DB_BUT_ADD', 'HK_DB_BUT_ADD_C', 'btn_new', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(6, 'btn_excel', 'var d=BX(''btn_excel''); if (d) location.href = d.href;', 'HK_DB_BUT_EXL', 'HK_DB_BUT_EXL_C', 'btn_excel', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(7, 'btn_settings', 'var d=BX(''btn_settings''); if (d) location.href = d.href;', 'HK_DB_BUT_OPT', 'HK_DB_BUT_OPT_C', 'btn_settings', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(8, 'btn_list', 'var d=BX(''btn_list''); if (d) location.href = d.href;', 'HK_DB_BUT_LST', 'HK_DB_BUT_LST_C', 'btn_list', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(9, 'Edit_Save_Button', 'var d=BX .findChild(document, {attribute: {''name'': ''save''}}, true );  if (d) d.click();', 'HK_DB_BUT_SAVE', 'HK_DB_BUT_SAVE_C', 'Edit_Save_Button', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(10, 'btn_delete', 'var d=BX(''btn_delete''); if (d) location.href = d.href;', 'HK_DB_BUT_DEL', 'HK_DB_BUT_DEL_C', 'btn_delete', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(12, 'CAdminFilter', 'var d=BX .findChild(document, {attribute: {''name'': ''find''}}, true ); if (d) d.focus();', 'HK_DB_FLT_FND', 'HK_DB_FLT_FND_C', 'find', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(13, 'CAdminFilter', 'var d=BX .findChild(document, {attribute: {''name'': ''set_filter''}}, true );  if (d) d.click();', 'HK_DB_FLT_BUT_F', 'HK_DB_FLT_BUT_F_C', 'set_filter', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(14, 'CAdminFilter', 'var d=BX .findChild(document, {attribute: {''name'': ''del_filter''}}, true );  if (d) d.click();', 'HK_DB_FLT_BUT_CNL', 'HK_DB_FLT_BUT_CNL_C', 'del_filter', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(15, 'bx-panel-admin-button-help-icon-id', 'var d=BX(''bx-panel-admin-button-help-icon-id''); if (d) location.href = d.href;', 'HK_DB_BUT_HLP', 'HK_DB_BUT_HLP_C', 'bx-panel-admin-button-help-icon-id', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(17, 'Global', 'BXHotKeys.ShowSettings();', 'HK_DB_SHW_L', 'HK_DB_SHW_L_C', 'bx-panel-hotkeys', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(19, 'Edit_Apply_Button', 'var d=BX .findChild(document, {attribute: {''name'': ''apply''}}, true );  if (d) d.click();', 'HK_DB_BUT_APPL', 'HK_DB_BUT_APPL_C', 'Edit_Apply_Button', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(20, 'Edit_Cancel_Button', 'var d=BX .findChild(document, {attribute: {''name'': ''cancel''}}, true );  if (d) d.click();', 'HK_DB_BUT_CANCEL', 'HK_DB_BUT_CANCEL_C', 'Edit_Cancel_Button', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(78, 'top_panel_templ_site', '', '-=AUTONAME=-', NULL, 'top_panel_templ_site', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(77, 'top_panel_templ_templ_css', '', '-=AUTONAME=-', NULL, 'top_panel_templ_templ_css', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(76, 'top_panel_templ_site_css', '', '-=AUTONAME=-', NULL, 'top_panel_templ_site_css', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(74, 'top_panel_cache_not', '', '-=AUTONAME=-', NULL, 'top_panel_cache_not', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(75, 'top_panel_edit_mode', '', '-=AUTONAME=-', NULL, 'top_panel_edit_mode', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(73, 'top_panel_cache_comp', '', '-=AUTONAME=-', NULL, 'top_panel_cache_comp', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(72, 'top_panel_cache_page', '', '-=AUTONAME=-', NULL, 'top_panel_cache_page', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(71, 'main_top_panel_struct_panel', '', '-=AUTONAME=-', NULL, 'main_top_panel_struct_panel', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(70, 'top_panel_access_folder_new', '', '-=AUTONAME=-', NULL, 'top_panel_access_folder_new', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(68, 'top_panel_del_page', '', '-=AUTONAME=-', NULL, 'top_panel_del_page', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(69, 'top_panel_folder_prop', '', '-=AUTONAME=-', NULL, 'top_panel_folder_prop', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(82, 'top_panel_debug_incl', '', '-=AUTONAME=-', NULL, 'top_panel_debug_incl', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(67, 'top_panel_edit_page_php', '', '-=AUTONAME=-', NULL, 'top_panel_edit_page_php', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(65, 'top_panel_edit_page_html', '', '-=AUTONAME=-', NULL, 'top_panel_edit_page_html', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(63, 'top_panel_edit_page', '', '-=AUTONAME=-', NULL, 'top_panel_edit_page', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(64, 'top_panel_page_prop', '', '-=AUTONAME=-', NULL, 'top_panel_page_prop', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(62, 'top_panel_create_folder', '', '-=AUTONAME=-', NULL, 'top_panel_create_folder', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(60, 'top_panel_create_page', '', '-=AUTONAME=-', NULL, 'top_panel_create_page', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(58, 'top_panel_bizproc_tasks', '', '-=AUTONAME=-', NULL, 'top_panel_bizproc_tasks', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(57, 'top_panel_help', '', '-=AUTONAME=-', NULL, 'top_panel_help', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(59, 'top_panel_add_fav', '', '-=AUTONAME=-', NULL, 'top_panel_add_fav', NULL, 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(56, 'top_panel_interface_settings', '', '-=AUTONAME=-', NULL, 'top_panel_interface_settings', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(54, 'top_panel_org_fav', '', '-=AUTONAME=-', NULL, 'top_panel_org_fav', NULL, 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(55, 'top_panel_module_settings', '', '-=AUTONAME=-', NULL, 'top_panel_module_settings', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(83, 'top_panel_debug_sql', '', '-=AUTONAME=-', NULL, 'top_panel_debug_sql', NULL, 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(81, 'top_panel_debug_time', '', '-=AUTONAME=-', NULL, 'top_panel_debug_time', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(84, 'top_panel_debug_compr', '', '-=AUTONAME=-', NULL, 'top_panel_debug_compr', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(85, 'MTP_SHORT_URI1', '', '-=AUTONAME=-', NULL, 'MTP_SHORT_URI1', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(86, 'MTP_SHORT_URI_LIST', '', '-=AUTONAME=-', NULL, 'MTP_SHORT_URI_LIST', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(87, 'FMST_PANEL_STICKER_ADD', '', '-=AUTONAME=-', NULL, 'FMST_PANEL_STICKER_ADD', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(88, 'FMST_PANEL_STICKERS_SHOW', '', '-=AUTONAME=-', NULL, 'FMST_PANEL_STICKERS_SHOW', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(89, 'FMST_PANEL_CUR_STICKER_LIST', '', '-=AUTONAME=-', NULL, 'FMST_PANEL_CUR_STICKER_LIST', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(90, 'FMST_PANEL_ALL_STICKER_LIST', '', '-=AUTONAME=-', NULL, 'FMST_PANEL_ALL_STICKER_LIST', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(91, 'top_panel_menu', 'var d=BX("bx-panel-menu"); if (d) d.click();', '-=AUTONAME=-', NULL, 'bx-panel-menu', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(92, 'top_panel_admin', 'var d=BX(''bx-panel-admin-tab''); if (d) location.href = d.href;', '-=AUTONAME=-', NULL, 'bx-panel-admin-tab', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(93, 'admin_panel_site', 'var d=BX(''bx-panel-view-tab''); if (d) location.href = d.href;', '-=AUTONAME=-', NULL, 'bx-panel-view-tab', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(94, 'admin_panel_admin', 'var d=BX(''bx-panel-admin-tab''); if (d) location.href = d.href;', '-=AUTONAME=-', NULL, 'bx-panel-admin-tab', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(111, 'top_panel_create_new', '', '-=AUTONAME=-', NULL, 'top_panel_create_new', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(96, 'top_panel_folder_prop_new', '', '-=AUTONAME=-', NULL, 'top_panel_folder_prop_new', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(97, 'main_top_panel_structure', '', '-=AUTONAME=-', NULL, 'main_top_panel_structure', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(98, 'top_panel_clear_cache', '', '-=AUTONAME=-', NULL, 'top_panel_clear_cache', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(99, 'top_panel_templ', '', '-=AUTONAME=-', NULL, 'top_panel_templ', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(100, 'top_panel_debug', '', '-=AUTONAME=-', NULL, 'top_panel_debug', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(101, 'MTP_SHORT_URI', '', '-=AUTONAME=-', NULL, 'MTP_SHORT_URI', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(102, 'FMST_PANEL_STICKERS', '', '-=AUTONAME=-', NULL, 'FMST_PANEL_STICKERS', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(103, 'top_panel_settings', '', '-=AUTONAME=-', NULL, 'top_panel_settings', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(104, 'top_panel_fav', '', '-=AUTONAME=-', NULL, 'top_panel_fav', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(106, 'Global', 'location.href=''/bitrix/admin/hot_keys_list.php?lang=ru'';', 'HK_DB_SHW_HK', '', '', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(107, 'top_panel_edit_new', '', '-=AUTONAME=-', NULL, 'top_panel_edit_new', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(108, 'FLOW_PANEL_CREATE_WITH_WF', '', '-=AUTONAME=-', NULL, 'FLOW_PANEL_CREATE_WITH_WF', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(109, 'FLOW_PANEL_EDIT_WITH_WF', '', '-=AUTONAME=-', NULL, 'FLOW_PANEL_EDIT_WITH_WF', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(110, 'FLOW_PANEL_HISTORY', '', '-=AUTONAME=-', NULL, 'FLOW_PANEL_HISTORY', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(112, 'top_panel_create_folder_new', '', '-=AUTONAME=-', NULL, 'top_panel_create_folder_new', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(139, 'Global', 'location.href=''/bitrix/admin/user_admin.php?lang=''+phpVars.LANGUAGE_ID;', 'HK_DB_SHW_U', '', '', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(116, 'bx-panel-toggle', '', '-=AUTONAME=-', NULL, 'bx-panel-toggle', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(118, 'bx-panel-expander', 'var d=BX(''bx-panel-expander''); if (d) BX.fireEvent(d, ''click'');', '-=AUTONAME=-', NULL, 'bx-panel-expander', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(117, 'bx-panel-small-toggle', '', '-=AUTONAME=-', NULL, 'bx-panel-small-toggle', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(119, 'bx-panel-hider', 'var d=BX(''bx-panel-hider''); if (d) d.click();', '-=AUTONAME=-', NULL, 'bx-panel-hider', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(120, 'search-textbox-input', 'var d=BX(''search-textbox-input''); if (d) { d.click(); d.focus();}', '-=AUTONAME=-', '', 'search', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(121, 'bx-search-input', 'var d=BX(''bx-search-input''); if (d) { d.click(); d.focus(); }', '-=AUTONAME=-', '', 'bx-search-input', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(133, 'bx-panel-logout', 'var d=BX(''bx-panel-logout''); if (d) location.href = d.href;', '-=AUTONAME=-', '', 'bx-panel-logout', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(138, 'CDialog', 'var d=BX(''btn_popup_save''); if (d) d.click();', 'HK_DB_D_EDIT_SAVE', '', 'btn_popup_save', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(135, 'CDialog', 'var d=BX(''cancel''); if (d) d.click();', 'HK_DB_D_CANCEL', '', 'cancel', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(136, 'CDialog', 'var d=BX(''close''); if (d) d.click();', 'HK_DB_D_CLOSE', '', 'close', '', 0)
/
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(137, 'CDialog', 'var d=BX(''savebtn''); if (d) d.click();', 'HK_DB_D_SAVE', '', 'savebtn', '', 0)
/


CREATE TABLE B_HOT_KEYS
(
  ID NUMBER(18) NOT NULL,
  KEYS_STRING varchar2(20 char) NOT NULL,
  CODE_ID NUMBER(18) NOT NULL,
  USER_ID NUMBER(18) NOT NULL,
  PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_HOT_KEYS START WITH 10 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE INDEX ix_hot_keys_code ON B_HOT_KEYS (CODE_ID)
/
CREATE INDEX ix_hot_keys_user ON B_HOT_KEYS (USER_ID)
/
CREATE UNIQUE INDEX ix_B_HOT_KEYS_co_u ON B_HOT_KEYS (CODE_ID,USER_ID)
/


INSERT INTO B_HOT_KEYS (ID, KEYS_STRING, CODE_ID, USER_ID) VALUES(1,'Ctrl+Alt+85', 139, 0)
/
INSERT INTO B_HOT_KEYS (ID, KEYS_STRING, CODE_ID, USER_ID) VALUES(2,'Ctrl+Alt+80', 17, 0)
/
INSERT INTO B_HOT_KEYS (ID, KEYS_STRING, CODE_ID, USER_ID) VALUES(3,'Ctrl+Alt+70', 120, 0)
/
INSERT INTO B_HOT_KEYS (ID, KEYS_STRING, CODE_ID, USER_ID) VALUES(4,'Ctrl+Alt+68', 117, 0)
/
INSERT INTO B_HOT_KEYS (ID, KEYS_STRING, CODE_ID, USER_ID) VALUES(5,'Ctrl+Alt+81', 3, 0)
/
INSERT INTO B_HOT_KEYS (ID, KEYS_STRING, CODE_ID, USER_ID) VALUES(6,'Ctrl+Alt+75', 106, 0)
/
INSERT INTO B_HOT_KEYS (ID, KEYS_STRING, CODE_ID, USER_ID) VALUES(7,'Ctrl+Alt+79', 133, 0)
/
INSERT INTO B_HOT_KEYS (ID, KEYS_STRING, CODE_ID, USER_ID) VALUES(8,'Ctrl+Alt+70', 121, 0)
/
INSERT INTO B_HOT_KEYS (ID, KEYS_STRING, CODE_ID, USER_ID) VALUES(9,'Ctrl+Alt+69', 118, 0)
/

CREATE TABLE B_ADMIN_NOTIFY
(
  ID NUMBER(18) NOT NULL,
  MODULE_ID VARCHAR2(50 CHAR) NULL,
  TAG VARCHAR2(255 CHAR) NULL,
  MESSAGE CLOB NULL,
  ENABLE_CLOSE CHAR(1 CHAR) DEFAULT ('Y') NULL,
  PUBLIC_SECTION CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
  NOTIFY_TYPE CHAR(1 CHAR) DEFAULT 'M' NOT NULL,
  PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_ADMIN_NOTIFY
/

CREATE OR REPLACE TRIGGER B_ADMIN_NOTIFY_insert
BEFORE INSERT
ON B_ADMIN_NOTIFY
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_ADMIN_NOTIFY.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE INDEX IX_B_AN_TAG ON B_ADMIN_NOTIFY(TAG)
/

CREATE TABLE B_ADMIN_NOTIFY_LANG
(
	ID NUMBER(18) NOT NULL,
	NOTIFY_ID NUMBER(18) NOT NULL,
	LID CHAR(2 CHAR) NOT NULL,
	MESSAGE CLOB,
	PRIMARY KEY (ID)
)
/
CREATE INDEX IX_ADM_NTFY_LID ON B_ADMIN_NOTIFY_LANG(LID)
/
CREATE UNIQUE INDEX IX_ADM_NTFY_LANG ON B_ADMIN_NOTIFY_LANG(NOTIFY_ID, LID)
/
CREATE SEQUENCE SQ_B_ADMIN_NOTIFY_LANG START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER B_ADMIN_NOTIFY_LANG_INSERT
BEFORE INSERT
ON B_ADMIN_NOTIFY_LANG
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_ADMIN_NOTIFY_LANG.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_FILTERS
(
	ID NUMBER(18) NOT NULL,
	USER_ID NUMBER(18) NULL,
	FILTER_ID VARCHAR2(255 CHAR) NOT NULL,
	NAME VARCHAR2(255 CHAR) NOT NULL,
	FIELDS clob NOT NULL,
	COMMON CHAR(1 CHAR) NULL,
	PRESET CHAR(1 CHAR) NULL,
	LANGUAGE_ID CHAR(2 CHAR) NULL,
	PRESET_ID VARCHAR2(255 CHAR) NULL,
	SORT NUMBER(18) NULL,
	SORT_FIELD VARCHAR2(255 CHAR) NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_FILTERS START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE TABLE B_COMPONENT_PARAMS
(
	ID NUMBER(18) NOT NULL,
	SITE_ID CHAR(2 CHAR) NOT NULL,
	COMPONENT_NAME VARCHAR2(255 CHAR) NOT NULL,
	TEMPLATE_NAME VARCHAR2(255 CHAR),
	REAL_PATH VARCHAR2(255 CHAR) NOT NULL,
	SEF_MODE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	SEF_FOLDER VARCHAR2(255 CHAR),
	START_CHAR NUMBER(18) NOT NULL,
	END_CHAR NUMBER(18) NOT NULL,
	PARAMETERS clob
)
/
CREATE SEQUENCE SQ_B_COMPONENT_PARAMS START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE INDEX IX_COMP_PARAMS_NAME ON B_COMPONENT_PARAMS(COMPONENT_NAME)
/
CREATE INDEX IX_COMP_PARAMS_SNAME ON B_COMPONENT_PARAMS(SITE_ID, COMPONENT_NAME)
/
CREATE INDEX IX_COMP_PARAMS_PATH ON B_COMPONENT_PARAMS(SITE_ID, REAL_PATH)
/

CREATE TABLE B_SMILE (
	ID number(18) not null,
	TYPE CHAR(1 CHAR) default 'S' not null,
	SET_ID number(18) default '0' not null,
	SORT number(10) default '150' not null,
	TYPING varchar2(100 CHAR) null,
	CLICKABLE char(1 CHAR) default 'Y' not null,
	HIDDEN char(1 CHAR) default 'N' not null,
	IMAGE varchar2(255 CHAR) not null,
	IMAGE_DEFINITION varchar2(10 CHAR) default 'SD' not null,
	IMAGE_WIDTH NUMBER(18) DEFAULT 0 NOT NULL,
	IMAGE_HEIGHT NUMBER(18) DEFAULT 0 NOT NULL,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_SMILE INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_SMILE_INSERT
BEFORE INSERT
ON B_SMILE
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_SMILE.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_SMILE_SET
(
	ID NUMBER(18) NOT NULL,
	TYPE CHAR(1 CHAR) default 'G' not null,
	PARENT_ID number(18) default '0' not null,
	STRING_ID VARCHAR2(255 CHAR) NOT NULL,
	SORT number(10) default '150' not null,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_SMILE_SET INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_SMILE_SET_INSERT
BEFORE INSERT
ON B_SMILE_SET
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_SMILE_SET.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_SMILE_LANG
(
	ID NUMBER(18) NOT NULL,
	TYPE CHAR(1 CHAR) default 'S' not null,
	SID NUMBER(18) NOT NULL,
	LID CHAR(2 CHAR) NOT NULL,
	NAME VARCHAR2(255 CHAR) NOT NULL,
	PRIMARY KEY (ID)
)
/

CREATE UNIQUE INDEX UX_SMILE_SL ON B_SMILE_LANG(TYPE, SID, LID)
/

CREATE SEQUENCE SQ_B_SMILE_LANG INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_SMILE_LANG_INSERT
BEFORE INSERT
ON B_SMILE_LANG
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_SMILE_LANG.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE b_app_password 
(
	ID NUMBER(18) NOT NULL,
	USER_ID NUMBER(18) NOT NULL,
	APPLICATION_ID VARCHAR2(255 char) NOT NULL,
	PASSWORD VARCHAR2(255 char) NOT NULL,
	DIGEST_PASSWORD VARCHAR2(255 char) NOT NULL,
	DATE_CREATE DATE NULL,
	DATE_LOGIN DATE NULL,
	LAST_IP VARCHAR2(255 char) NULL,
	"COMMENT" VARCHAR2(255 char) NULL,
	SYSCOMMENT VARCHAR2(255 char) NULL,
	CODE VARCHAR2(255 char) NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_app_password INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE INDEX ix_app_password_user ON b_app_password(USER_ID)
/
CREATE OR REPLACE TRIGGER B_APP_PASSWORD_INSERT
BEFORE INSERT
ON b_app_password
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT sq_b_app_password.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_COUNTER_DATA
(
  ID CHAR(16 CHAR) NOT NULL,
  TYPE CHAR(30 CHAR) NOT NULL,
  DATA CLOB NOT NULL,
  PRIMARY KEY (ID)
)
/

CREATE TABLE B_FINDER_DEST
(
	USER_ID NUMBER(18) NOT NULL,
	CODE CHAR(30 CHAR) NOT NULL,
	CODE_USER_ID NUMBER(18) NULL,
	CODE_TYPE CHAR(10 CHAR) NULL,
	CONTEXT varchar2(50 char) NOT NULL,
	LAST_USE_DATE DATE NULL,
	PRIMARY KEY (USER_ID, CODE, CONTEXT)
)
/
CREATE INDEX IX_FINDER_DEST ON B_FINDER_DEST(CODE_TYPE)
/


CREATE TABLE B_URLPREVIEW_METADATA
(
	ID NUMBER(18) NOT NULL,
	URL varchar2(200 CHAR) NOT NULL,
	TYPE char(1 CHAR) DEFAULT 'S' NOT NULL,
	DATE_INSERT date NOT NULL,
	DATE_EXPIRE date NULL,
	TITLE varchar2(200 CHAR) NULL,
	DESCRIPTION clob,
	IMAGE_ID number(18) NULL,
	IMAGE varchar2(255 CHAR) NULL,
	EMBED clob,
	EXTRA clob,
	PRIMARY KEY (ID)
)
/
CREATE INDEX IX_URLPREVIEW_METADATA_URL ON B_URLPREVIEW_METADATA (URL)
/

CREATE SEQUENCE sq_B_URLPREVIEW_METADATA INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_URLPREVIEW_METADATA_INSERT
	BEFORE INSERT
	ON B_URLPREVIEW_METADATA
	FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT sq_B_URLPREVIEW_METADATA.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_URLPREVIEW_ROUTE
(
	ID NUMBER(18) NOT NULL,
	ROUTE varchar2(200 CHAR) NOT NULL,
	MODULE varchar2(50 CHAR) NOT NULL,
	CLASS varchar2(150 CHAR) NOT NULL,
	PARAMETERS clob,
	PRIMARY KEY (ID)
)
/

CREATE UNIQUE INDEX UX_URLPREVIEW_ROUTE_ROUTE ON B_URLPREVIEW_ROUTE (ROUTE)
/

CREATE SEQUENCE sq_b_urlpreview_route INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_URLPREVIEW_ROUTE_INSERT
	BEFORE INSERT
	ON B_URLPREVIEW_ROUTE
	FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT sq_b_urlpreview_route.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_COMPOSITE_PAGE
(
	ID number(18) NOT NULL,
	CACHE_KEY varchar(2000) NOT NULL,
	HOST varchar2(100) NOT NULL,
	URI varchar2(2000) NOT NULL,
	TITLE varchar2(250) NULL,
	CREATED date NOT NULL,
	CHANGED date NOT NULL,
	LAST_VIEWED date NOT NULL,
	VIEWS number(18) DEFAULT 0 NOT NULL,
	REWRITES number(18) DEFAULT 0 NOT NULL,
	"SIZE" number(18) DEFAULT 0 NOT NULL,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE sq_b_composite_page INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_COMPOSITE_PAGE_INSERT
BEFORE INSERT
	ON B_COMPOSITE_PAGE
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT sq_b_composite_page.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE INDEX IX_B_COMPOSITE_PAGE_CACHE_KEY ON B_COMPOSITE_PAGE(CACHE_KEY)
/
CREATE INDEX IX_B_COMPOSITE_PAGE_VIEWED ON B_COMPOSITE_PAGE(LAST_VIEWED)
/
CREATE INDEX IX_B_COMPOSITE_PAGE_HOST ON B_COMPOSITE_PAGE(HOST)
/

CREATE TABLE B_COMPOSITE_LOG
(
	ID number(18) NOT NULL,
	HOST varchar2(100) NOT NULL,
	URI varchar2(2000) NOT NULL,
	TITLE varchar2(250) NULL,
	CREATED date NOT NULL,
	TYPE varchar2(50) NOT NULL,
	MESSAGE clob,
	AJAX char(1 char) DEFAULT 'N' NOT NULL,
	USER_ID number(18) DEFAULT 0 NOT NULL,
	PAGE_ID number(18) DEFAULT 0 NOT NULL,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE sq_b_composite_log INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_COMPOSITE_LOG_INSERT
BEFORE INSERT
	ON B_COMPOSITE_LOG
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT sq_b_composite_log.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE INDEX IX_B_COMPOSITE_LOG_PAGE_ID ON B_COMPOSITE_LOG(PAGE_ID)
/
CREATE INDEX IX_B_COMPOSITE_LOG_HOST ON B_COMPOSITE_LOG(HOST)
/
CREATE INDEX IX_B_COMPOSITE_LOG_TYPE ON B_COMPOSITE_LOG(TYPE)
/