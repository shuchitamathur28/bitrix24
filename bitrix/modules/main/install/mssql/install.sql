create procedure DELFILE
(
	@FILE_ID_OLD int,
	@FILE_ID_NEW int
)
as
if @FILE_ID_OLD is not null and isnull(@FILE_ID_OLD, 0)<>isnull(@FILE_ID_NEW, 0)
begin
	DELETE FROM B_FILE WHERE ID=@FILE_ID_OLD
end

if @@error <>0
begin
	raiserror ('Procedure DELFILE Error',16,1)
end
GO


CREATE TABLE B_AGENT
(
	ID int NOT NULL IDENTITY (1, 1),
	MODULE_ID varchar(255) NULL,
	SORT int NOT NULL,
	NAME varchar(2000) NULL,
	ACTIVE char(1) NOT NULL,
	LAST_EXEC datetime NULL,
	NEXT_EXEC datetime NOT NULL,
	DATE_CHECK datetime NULL,
	AGENT_INTERVAL int NULL,
	IS_PERIOD char(1) NOT NULL,
	USER_ID int NULL,
	RUNNING char(1) NOT NULL DEFAULT 'N'
)
GO
ALTER TABLE B_AGENT ADD CONSTRAINT PK_B_AGENT PRIMARY KEY (ID)
GO
CREATE INDEX IX_AGENT_USER_ID ON B_AGENT (USER_ID)
GO
ALTER TABLE B_AGENT ADD CONSTRAINT DF_B_AGENT_SORT DEFAULT 100 FOR SORT
GO
ALTER TABLE B_AGENT ADD CONSTRAINT DF_B_AGENT_ACTIVE DEFAULT 'Y' FOR ACTIVE
GO
ALTER TABLE B_AGENT ADD CONSTRAINT DF_B_AGENT_AGENT_INTERVAL DEFAULT 86400 FOR AGENT_INTERVAL
GO
ALTER TABLE B_AGENT ADD CONSTRAINT DF_B_AGENT_IS_PERIOD DEFAULT 'Y' FOR IS_PERIOD
GO
ALTER TABLE B_AGENT ADD CONSTRAINT DF_B_AGENT_USER_ID DEFAULT NULL FOR USER_ID
GO

CREATE TABLE B_EVENT
(
	ID int NOT NULL IDENTITY (1, 1),
	EVENT_NAME varchar(255) NOT NULL,
	MESSAGE_ID int NULL,
	LID varchar(255) NOT NULL,
	C_FIELDS text NULL,
	DATE_INSERT datetime NULL,
	DATE_EXEC datetime NULL,
	SUCCESS_EXEC char(1) NOT NULL,
	DUPLICATE char(1) NOT NULL,
	LANGUAGE_ID char(2) NULL
)
GO
ALTER TABLE B_EVENT ADD CONSTRAINT PK_B_EVENT PRIMARY KEY (ID)
GO
ALTER TABLE B_EVENT ADD CONSTRAINT DF_B_EVENT_SUCCESS_EXEC DEFAULT 'N' FOR SUCCESS_EXEC
GO
ALTER TABLE B_EVENT ADD CONSTRAINT DF_B_EVENT_DUPLICATE DEFAULT 'Y' FOR DUPLICATE
GO
CREATE INDEX IX_B_EVENT_SUCCESS_EXEC ON B_EVENT (SUCCESS_EXEC)
GO
CREATE INDEX ix_b_event_date_exec ON B_EVENT (DATE_EXEC)
GO

CREATE TABLE B_EVENT_MESSAGE
(
	ID int NOT NULL IDENTITY (1, 1),
	TIMESTAMP_X datetime NULL,
	LID char(2) NULL,
	EVENT_NAME varchar(255) NOT NULL,
	ACTIVE char(1) NOT NULL,
	EMAIL_FROM varchar(255) NOT NULL,
	EMAIL_TO varchar(255) NOT NULL,
	SUBJECT varchar(255) NULL,
	MESSAGE text NULL,
	MESSAGE_PHP text NULL,
	BODY_TYPE varchar(50) NOT NULL,
	BCC text NULL,
	REPLY_TO varchar(255) NULL,
	CC varchar(255) NULL,
	IN_REPLY_TO varchar(255) NULL,
	PRIORITY varchar(50) NULL,
	FIELD1_NAME varchar(50) NULL,
	FIELD1_VALUE varchar(255) NULL,
	FIELD2_NAME varchar(50) NULL,
	FIELD2_VALUE varchar(255) NULL,
	SITE_TEMPLATE_ID varchar(255) DEFAULT NULL,
	ADDITIONAL_FIELD text NULL,
	LANGUAGE_ID char(2) NULL
)
GO
ALTER TABLE B_EVENT_MESSAGE ADD CONSTRAINT PK_B_EVENT_MESSAGE PRIMARY KEY (ID)
GO
ALTER TABLE B_EVENT_MESSAGE ADD CONSTRAINT DF_B_EVENT_MESSAGE_TIMESTAMP_X DEFAULT GETDATE() FOR TIMESTAMP_X
GO
ALTER TABLE B_EVENT_MESSAGE ADD CONSTRAINT DF_B_EVENT_MESSAGE_ACTIVE DEFAULT 'Y' FOR ACTIVE
GO
ALTER TABLE B_EVENT_MESSAGE ADD CONSTRAINT DF_B_EVENT_MESSAGE_EMAIL_FROM DEFAULT '#EMAIL_FROM#' FOR EMAIL_FROM
GO
ALTER TABLE B_EVENT_MESSAGE ADD CONSTRAINT DF_B_EVENT_MESSAGE_EMAIL_TO DEFAULT '#EMAIL_TO#' FOR EMAIL_TO
GO
ALTER TABLE B_EVENT_MESSAGE ADD CONSTRAINT DF_B_EVENT_MESSAGE_BODY_TYPE DEFAULT 'text' FOR BODY_TYPE
GO
CREATE INDEX IX_B_EVENT_MESSAGE_NAME ON B_EVENT_MESSAGE (EVENT_NAME)
GO

create trigger B_EVENT_MESSAGE_UPDATE on B_EVENT_MESSAGE for update as
if (not update(TIMESTAMP_X))
begin
	UPDATE B_EVENT_MESSAGE SET
		TIMESTAMP_X = GETDATE()
	FROM
		B_EVENT_MESSAGE U,
		INSERTED I,
		DELETED D
	WHERE
		U.ID = I.ID
	and U.ID = D.ID
end

if @@error <>0
begin
	raiserror ('Trigger B_EVENT_MESSAGE_UPDATE Error',16,1)
end
GO

CREATE TABLE B_EVENT_ATTACHMENT
(
  EVENT_ID int not null,
  FILE_ID int not null,
  IS_FILE_COPIED char(1) NOT NULL
)
GO
ALTER TABLE B_EVENT_ATTACHMENT ADD CONSTRAINT DF_B_EVENT_ATTACHMENT_COPIED DEFAULT 'Y' FOR IS_FILE_COPIED
GO
ALTER TABLE B_EVENT_ATTACHMENT ADD CONSTRAINT PK_B_EVENT_ATTACHMENT PRIMARY KEY (EVENT_ID, FILE_ID)
GO

CREATE TABLE B_EVENT_MESSAGE_ATTACHMENT
(
  EVENT_MESSAGE_ID int not null,
  FILE_ID int not null
)
GO
ALTER TABLE B_EVENT_MESSAGE_ATTACHMENT ADD CONSTRAINT PK_B_EVENT_MESSAGE_ATTACHMENT PRIMARY KEY (EVENT_MESSAGE_ID, FILE_ID)
GO

CREATE TABLE B_EVENT_MESSAGE_SITE
(
	EVENT_MESSAGE_ID int NOT NULL,
	SITE_ID char(2) NOT NULL
)
GO
ALTER TABLE B_EVENT_MESSAGE_SITE ADD CONSTRAINT PK_B_EVENT_MESSAGE_SITE PRIMARY KEY (EVENT_MESSAGE_ID, SITE_ID)
GO


CREATE TABLE B_EVENT_TYPE
(
	ID int NOT NULL IDENTITY (1, 1),
	LID char(2) NOT NULL,
	EVENT_NAME varchar(255) NOT NULL,
	NAME varchar(100),
	DESCRIPTION text NULL,
	SORT int NOT NULL
)
GO
ALTER TABLE B_EVENT_TYPE ADD CONSTRAINT PK_B_EVENT_TYPE PRIMARY KEY (ID)
GO
ALTER TABLE B_EVENT_TYPE ADD CONSTRAINT DF_B_EVENT_TYPE_SORT DEFAULT 150 FOR SORT
GO
CREATE UNIQUE INDEX UX_B_EVENT_TYPE_EVENT_NAME_LID ON B_EVENT_TYPE (EVENT_NAME, LID)
GO


CREATE TABLE B_FAVORITE
(
	ID int NOT NULL IDENTITY (1, 1),
	TIMESTAMP_X datetime NULL,
	DATE_CREATE datetime NULL,
	MODIFIED_BY int NULL,
	CREATED_BY int NULL,
	MODULE_ID varchar(50) NULL,
	NAME varchar(255) NULL,
	URL varchar(8000) NULL,
	COMMENTS varchar(8000) NULL,
	C_SORT int NOT NULL,
	LANGUAGE_ID CHAR(2) NULL,
	USER_ID INT NULL,
	CODE_ID INT NULL,
	MENU_ID varchar(255) NULL,
	COMMON CHAR(1) NOT NULL
)
GO
ALTER TABLE B_FAVORITE ADD CONSTRAINT PK_B_FAVORITE PRIMARY KEY (ID)
GO
ALTER TABLE B_FAVORITE ADD CONSTRAINT DF_B_FAVORITE_TIMESTAMP_X DEFAULT GETDATE() FOR TIMESTAMP_X
GO
ALTER TABLE B_FAVORITE ADD CONSTRAINT DF_B_FAVORITE_C_SORT DEFAULT 100 FOR C_SORT
GO
ALTER TABLE B_FAVORITE ADD CONSTRAINT DF_B_FAVORITE_COMMON DEFAULT 'Y' FOR COMMON
GO


CREATE TABLE B_FAVORITE_LANG
(
	ID int NOT NULL IDENTITY (1, 1),
	FAVORITE_ID int NOT NULL,
	LID char(2) NOT NULL,
	MENU varchar(255) NOT NULL
)
GO
ALTER TABLE B_FAVORITE_LANG ADD CONSTRAINT PK_B_FAVORITE_LANG PRIMARY KEY (ID)
GO


CREATE TABLE B_FILE
(
	ID int NOT NULL IDENTITY (1, 1),
	TIMESTAMP_X datetime NULL,
	MODULE_ID varchar(50) NULL,
	HEIGHT int NULL,
	WIDTH int NULL,
	FILE_SIZE bigint NULL,
	CONTENT_TYPE varchar(255) NULL,
	SUBDIR varchar(255) NULL,
	FILE_NAME varchar(255) NOT NULL,
	ORIGINAL_NAME varchar(255) NULL,
	DESCRIPTION varchar(255) NULL,
	HANDLER_ID varchar(50) NULL,
	EXTERNAL_ID varchar(50) NULL
)
GO
ALTER TABLE B_FILE ADD CONSTRAINT PK_B_FILE PRIMARY KEY (ID)
GO
ALTER TABLE B_FILE ADD CONSTRAINT DF_B_FILE_TIMESTAMP_X DEFAULT GETDATE() FOR TIMESTAMP_X
GO
ALTER TABLE B_FILE ADD CONSTRAINT DF_B_FILE_CONTENT_TYPE DEFAULT 'IMAGE' FOR CONTENT_TYPE
GO
CREATE INDEX IX_B_FILE_EXTERNAL_ID ON B_FILE (EXTERNAL_ID)
GO

create trigger B_FILE_UPDATE on B_FILE for update as
if (not update(TIMESTAMP_X))
begin
	UPDATE B_FILE SET
		TIMESTAMP_X = GETDATE()
	FROM
		B_FILE U,
		INSERTED I,
		DELETED D
	WHERE
		U.ID = I.ID
	and U.ID = D.ID
end

if @@error <>0
begin
	raiserror ('Trigger B_FILE_UPDATE Error',16,1)
end
GO

create trigger B_FILE_DELETE on B_FILE for delete as
begin
	INSERT INTO B_FILE_ACTION (
		FILE_NAME,
		SUBDIR,
		FILE_ACTION)
	SELECT
		D.FILE_NAME,
		D.SUBDIR,
		'DELETE'
	FROM
		DELETED D

	if @@error <>0
	begin
		raiserror ('Trigger B_FILE_DELETE Error',16,1)
	end
end
GO


CREATE TABLE B_FILE_ACTION
(
	ID int NOT NULL IDENTITY (1, 1),
	FILE_NAME varchar(255) NOT NULL,
	SUBDIR varchar(255) NULL,
	FILE_ACTION varchar(50) NULL,
	DATE_INSERT datetime NOT NULL,
	DATE_EXEC datetime NULL,
	SUCCESS_EXEC char(1) NULL,
	DATE_REQUEST datetime NULL
)
GO
ALTER TABLE B_FILE_ACTION ADD CONSTRAINT PK_B_FILE_ACTION PRIMARY KEY (ID)
GO
ALTER TABLE B_FILE_ACTION ADD CONSTRAINT DF_B_FILE_ACTION_DATE_INSERT DEFAULT GETDATE() FOR DATE_INSERT
GO


CREATE TABLE B_GROUP
(
	ID int NOT NULL IDENTITY (1, 1),
	TIMESTAMP_X datetime NULL,
	ACTIVE char(1) NOT NULL,
	C_SORT int NOT NULL,
	ANONYMOUS char(1) NOT NULL,
	NAME varchar(255) NOT NULL,
	DESCRIPTION varchar(255) NULL,
    SECURITY_POLICY text null,
    STRING_ID varchar(255) NULL
)
GO
ALTER TABLE B_GROUP ADD CONSTRAINT PK_B_GROUP PRIMARY KEY (ID)
GO
ALTER TABLE B_GROUP ADD CONSTRAINT DF_B_GROUP_TIMESTAMP_X DEFAULT GETDATE() FOR TIMESTAMP_X
GO
ALTER TABLE B_GROUP ADD CONSTRAINT DF_B_GROUP_ACTIVE DEFAULT 'Y' FOR ACTIVE
GO
ALTER TABLE B_GROUP ADD CONSTRAINT DF_B_GROUP_C_SORT DEFAULT 100 FOR C_SORT
GO
ALTER TABLE B_GROUP ADD CONSTRAINT DF_B_GROUP_ANONYMOUS DEFAULT 'N' FOR ANONYMOUS
GO

create trigger B_GROUP_UPDATE on B_GROUP for update as
if (not update(TIMESTAMP_X))
begin
	UPDATE B_GROUP SET
		TIMESTAMP_X = GETDATE()
	FROM
		B_GROUP U,
		INSERTED I,
		DELETED D
	WHERE
		U.ID = I.ID
	and U.ID = D.ID
end

if @@error <>0
begin
	raiserror ('Trigger B_GROUP_UPDATE Error',16,1)
end
GO


CREATE TABLE B_LANG
(
	LID char(2) NOT NULL,
	SORT int NOT NULL,
	DEF char(1) NOT NULL,
	ACTIVE char(1) NOT NULL,
	NAME varchar(50) NOT NULL,
	DIR varchar(50) NOT NULL,
	FORMAT_DATE varchar(50) NULL,
	FORMAT_DATETIME varchar(50) NULL,
	FORMAT_NAME varchar(255) NULL,
	WEEK_START int NULL,
	CHARSET varchar(255) NULL,
	LANGUAGE_ID char(2) NOT NULL,
	DOC_ROOT varchar(255) NULL,
	DOMAIN_LIMITED char(1) NOT NULL,
	SERVER_NAME varchar(255) NULL,
	SITE_NAME varchar(255) NULL,
	EMAIL varchar(255) NULL,
	CULTURE_ID int
)
GO
ALTER TABLE B_LANG ADD CONSTRAINT PK_B_LANG PRIMARY KEY (LID)
GO
ALTER TABLE B_LANG ADD CONSTRAINT DF_B_LANG_SORT DEFAULT 100 FOR SORT
GO
ALTER TABLE B_LANG ADD CONSTRAINT DF_B_LANG_DEF DEFAULT 'N' FOR DEF
GO
ALTER TABLE B_LANG ADD CONSTRAINT DF_B_LANG_ACTIVE DEFAULT 'Y' FOR ACTIVE
GO
ALTER TABLE B_LANG ADD CONSTRAINT DF_B_LANG_DOMAIN_LIMITED DEFAULT 'N' FOR DOMAIN_LIMITED
GO
ALTER TABLE B_LANG ADD CONSTRAINT DF_B_LANG_WEEK_START DEFAULT 1 FOR WEEK_START
GO


CREATE TABLE B_LANG_DOMAIN
(
	LID char(2) NOT NULL,
	DOMAIN varchar(255) NOT NULL
)
GO
ALTER TABLE B_LANG_DOMAIN ADD CONSTRAINT PK_B_LANG_DOMAIN PRIMARY KEY (LID, DOMAIN)
GO


CREATE TABLE B_LANGUAGE
(
	LID char(2) NOT NULL,
	SORT int NOT NULL,
	DEF char(1) NOT NULL,
	ACTIVE char(1) NOT NULL,
	NAME varchar(50) NOT NULL,
	FORMAT_DATE varchar(50) NULL,
	FORMAT_DATETIME varchar(50) NULL,
	FORMAT_NAME varchar(255) NULL,
	WEEK_START int NULL,
	CHARSET varchar(255) NULL,
	DIRECTION char(1) NULL,
	CULTURE_ID int
)
GO
ALTER TABLE B_LANGUAGE ADD CONSTRAINT PK_B_LANGUAGE PRIMARY KEY (LID)
GO
ALTER TABLE B_LANGUAGE ADD CONSTRAINT DF_B_LANGUAGE_SORT DEFAULT 100 FOR SORT
GO
ALTER TABLE B_LANGUAGE ADD CONSTRAINT DF_B_LANGUAGE_DEF DEFAULT 'N' FOR DEF
GO
ALTER TABLE B_LANGUAGE ADD CONSTRAINT DF_B_LANGUAGE_ACTIVE DEFAULT 'Y' FOR ACTIVE
GO
ALTER TABLE B_LANGUAGE ADD CONSTRAINT DF_B_LANGUAGE_DIRECTION DEFAULT 'Y' FOR DIRECTION
GO
ALTER TABLE B_LANGUAGE ADD CONSTRAINT DF_B_LANGUAGE_WEEK_START DEFAULT 1 FOR WEEK_START
GO

CREATE TABLE B_CULTURE
(
	ID INT NOT NULL IDENTITY (1, 1),
	CODE varchar(255) NULL,
	NAME varchar(255) NULL,
	FORMAT_DATE varchar(255) NULL,
	FORMAT_DATETIME varchar(255) NULL,
	FORMAT_NAME varchar(255) NULL,
	WEEK_START int NULL default 1,
	CHARSET varchar(255) NULL,
	DIRECTION char(1) NULL DEFAULT 'Y'
)
GO
ALTER TABLE B_CULTURE ADD CONSTRAINT PK_B_CULTURE PRIMARY KEY (ID)
GO

CREATE TABLE B_MODULE
(
	ID varchar(50) NOT NULL,
	DATE_ACTIVE datetime NULL
)
GO
ALTER TABLE B_MODULE ADD CONSTRAINT PK_B_MODULE PRIMARY KEY (ID)
GO

CREATE TABLE B_MODULE_GROUP
(
	ID int NOT NULL IDENTITY (1, 1),
	MODULE_ID varchar(50) NOT NULL,
	GROUP_ID int NOT NULL,
	G_ACCESS varchar(255) NOT NULL,
	SITE_ID char(2) NULL
)
GO
ALTER TABLE B_MODULE_GROUP ADD CONSTRAINT PK_B_MODULE_GROUP PRIMARY KEY (ID)
GO
CREATE UNIQUE INDEX UX_B_MODULE_GROUP_MODULE_ID_GROUP_ID ON B_MODULE_GROUP (MODULE_ID, GROUP_ID, SITE_ID)
GO


CREATE TABLE B_MODULE_TO_MODULE
(
	ID int NOT NULL IDENTITY (1, 1),
	TIMESTAMP_X datetime NULL,
	SORT int NOT NULL,
	FROM_MODULE_ID varchar(50) NOT NULL,
	MESSAGE_ID varchar(255) NOT NULL,
	TO_MODULE_ID varchar(50) NOT NULL,
	TO_PATH varchar(255) NULL,
	TO_CLASS varchar(255) NULL,
	TO_METHOD varchar(255) NULL,
	TO_METHOD_ARG varchar(255) NULL,
	VERSION int null
)
GO
ALTER TABLE B_MODULE_TO_MODULE ADD CONSTRAINT PK_B_MODULE_TO_MODULE PRIMARY KEY (ID)
GO
ALTER TABLE B_MODULE_TO_MODULE ADD CONSTRAINT DF_B_MODULE_TO_MODULE_TIMESTAMP_X DEFAULT GETDATE() FOR TIMESTAMP_X
GO
ALTER TABLE B_MODULE_TO_MODULE ADD CONSTRAINT DF_B_MODULE_TO_MODULE_SORT DEFAULT 100 FOR SORT
GO
CREATE INDEX IX_MODULE_TO_MODULE ON B_MODULE_TO_MODULE (FROM_MODULE_ID, MESSAGE_ID, TO_MODULE_ID, TO_CLASS, TO_METHOD)
GO

CREATE TABLE B_OPTION
(
	MODULE_ID varchar(50) NULL,
	NAME varchar(50) NOT NULL,
	VALUE text NULL,
	DESCRIPTION varchar(255) NULL,
	SITE_ID char(2) NULL
)
GO
CREATE UNIQUE INDEX IX_OPTION ON B_OPTION (MODULE_ID, NAME, SITE_ID)
GO
CREATE INDEX IX_OPTION_NAME ON B_OPTION (NAME)
GO

CREATE TABLE B_SITE_TEMPLATE
(
	ID int NOT NULL IDENTITY (1, 1),
	SITE_ID char(2) NOT NULL,
	CONDITION varchar(255) NULL,
	SORT int NOT NULL,
	TEMPLATE varchar(255) NOT NULL
)
GO
ALTER TABLE B_SITE_TEMPLATE ADD CONSTRAINT PK_B_SITE_TEMPLATE PRIMARY KEY (ID)
GO
ALTER TABLE B_SITE_TEMPLATE ADD CONSTRAINT DF_B_SITE_TEMPLATE_SORT DEFAULT 500 FOR SORT
GO
CREATE INDEX ix_site_template_site ON B_SITE_TEMPLATE (SITE_ID)
GO

CREATE TABLE B_USER
(
	ID int NOT NULL IDENTITY (1, 1),
	TIMESTAMP_X datetime NULL,
	LOGIN varchar(50) NOT NULL,
	PASSWORD varchar(50) NOT NULL,
	CHECKWORD varchar(50),
	ACTIVE char(1) NOT NULL,
	NAME varchar(50) NULL,
	LAST_NAME varchar(50) NULL,
	EMAIL varchar(255) NULL,
	LAST_LOGIN datetime NULL,
	DATE_REGISTER datetime NOT NULL,
	PERSONAL_PROFESSION varchar(255) NULL,
	PERSONAL_WWW varchar(255) NULL,
	PERSONAL_ICQ varchar(255) NULL,
	PERSONAL_GENDER char(1) NULL,
	PERSONAL_BIRTHDATE varchar(50) NULL,
	PERSONAL_PHOTO int NULL,
	PERSONAL_PHONE varchar(255) NULL,
	PERSONAL_FAX varchar(255) NULL,
	PERSONAL_MOBILE varchar(255) NULL,
	PERSONAL_PAGER varchar(255) NULL,
	PERSONAL_STREET text NULL,
	PERSONAL_MAILBOX varchar(255) NULL,
	PERSONAL_CITY varchar(255) NULL,
	PERSONAL_STATE varchar(255) NULL,
	PERSONAL_ZIP varchar(255) NULL,
	PERSONAL_COUNTRY varchar(255) NULL,
	PERSONAL_NOTES text NULL,
	WORK_COMPANY varchar(255) NULL,
	WORK_DEPARTMENT varchar(255) NULL,
	WORK_POSITION varchar(255) NULL,
	WORK_WWW varchar(255) NULL,
	WORK_PHONE varchar(255) NULL,
	WORK_FAX varchar(255) NULL,
	WORK_PAGER varchar(255) NULL,
	WORK_STREET text NULL,
	WORK_MAILBOX varchar(255) NULL,
	WORK_CITY varchar(255) NULL,
	WORK_STATE varchar(255) NULL,
	WORK_ZIP varchar(255) NULL,
	WORK_COUNTRY varchar(255) NULL,
	WORK_PROFILE text NULL,
	WORK_LOGO int NULL,
	WORK_NOTES text NULL,
	ADMIN_NOTES text NULL,
	LID char(2) NULL,
	STORED_HASH varchar(32) NULL,
	XML_ID varchar(255) NULL,
	PERSONAL_BIRTHDAY datetime NULL,
	EXTERNAL_AUTH_ID varchar(255) NULL,
	CHECKWORD_TIME datetime NULL,
	SECOND_NAME varchar(50) NULL,
	CONFIRM_CODE varchar(8) NULL,
	LOGIN_ATTEMPTS int NULL,
	LAST_ACTIVITY_DATE datetime NULL,
	AUTO_TIME_ZONE char(1) null,
	TIME_ZONE varchar(50) null,
	TIME_ZONE_OFFSET int null,
	TITLE varchar(255) null,
	BX_USER_ID varchar(32) null,
	LANGUAGE_ID char(2) null
)
GO
ALTER TABLE B_USER ADD CONSTRAINT PK_B_USER PRIMARY KEY (ID)
GO
ALTER TABLE B_USER ADD CONSTRAINT DF_B_USER_TIMESTAMP_X DEFAULT GETDATE() FOR TIMESTAMP_X
GO
ALTER TABLE B_USER ADD CONSTRAINT DF_B_USER_ACTIVE DEFAULT 'Y' FOR ACTIVE
GO
CREATE UNIQUE INDEX UX_B_USER_LOGIN_EXTERNAL_AUTH_ID ON B_USER (LOGIN, EXTERNAL_AUTH_ID)
GO
CREATE INDEX IX_B_USER_EMAIL ON B_USER (EMAIL)
GO
CREATE INDEX IX_B_USER_ACTIVITY_DATE ON B_USER (LAST_ACTIVITY_DATE)
GO
CREATE INDEX IX_B_USER_XML_ID ON B_USER (XML_ID)
GO

create trigger B_USER_UPDATE on B_USER for update as
if (not update(TIMESTAMP_X))
begin
	UPDATE B_USER SET
		TIMESTAMP_X = GETDATE()
	FROM
		B_USER U,
		INSERTED I,
		DELETED D
	WHERE
		U.ID = I.ID
	and U.ID = D.ID
end

if (update(PERSONAL_PHOTO) or update(WORK_LOGO))
begin

	declare
		@PERSONAL_PHOTO_NEW int,
		@WORK_LOGO_NEW int,
		@PERSONAL_PHOTO_OLD int,
		@WORK_LOGO_OLD int

	declare cCursor cursor for
		SELECT
			I.PERSONAL_PHOTO	PERSONAL_PHOTO_NEW,
			I.WORK_LOGO			WORK_LOGO_NEW,
			D.PERSONAL_PHOTO	PERSONAL_PHOTO_OLD,
			D.WORK_LOGO			WORK_LOGO_OLD
		FROM
			INSERTED I,
			DELETED D
		WHERE
			I.ID = D.ID

	open cCursor

	while 1=1
	begin
		fetch next from cCursor into
			@PERSONAL_PHOTO_NEW,
			@WORK_LOGO_NEW,
			@PERSONAL_PHOTO_OLD,
			@WORK_LOGO_OLD

		if @@fetch_status<>0
			break

		exec DELFILE @PERSONAL_PHOTO_OLD, @PERSONAL_PHOTO_NEW
		exec DELFILE @WORK_LOGO_OLD, @WORK_LOGO_NEW

	end
	close cCursor
	deallocate cCursor
end

if @@error <>0
begin
	raiserror ('Trigger B_USER_UPDATE Error',16,1)
end
GO

create trigger B_USER_DELETE on B_USER for delete as

declare
	@PERSONAL_PHOTO int,
	@WORK_LOGO int

declare cCursor cursor for
	SELECT
		D.PERSONAL_PHOTO,
		D.WORK_LOGO
	FROM
		DELETED D

open cCursor

while 1=1
begin
	fetch next from cCursor into
		@PERSONAL_PHOTO,
		@WORK_LOGO

	if @@fetch_status<>0
		break

	exec DELFILE @PERSONAL_PHOTO, null
	exec DELFILE @WORK_LOGO, null

end
close cCursor
deallocate cCursor

if @@error <>0
begin
	raiserror ('Trigger B_USER_DELETE Error',16,1)
end
GO

CREATE TABLE B_USER_GROUP
(
	USER_ID int NOT NULL,
	GROUP_ID int NOT NULL,
	DATE_ACTIVE_FROM datetime NULL,
	DATE_ACTIVE_TO datetime NULL
)
GO
CREATE UNIQUE INDEX UX_B_USER_GROUP_USER_ID_GROUP_ID ON B_USER_GROUP (USER_ID, GROUP_ID)
GO
CREATE INDEX UX_B_USER_GROUP_GROUP_ID ON B_USER_GROUP (GROUP_ID)
GO

create table B_USER_STORED_AUTH
(
    ID          int					NOT NULL IDENTITY (1, 1),
	USER_ID		int					not null,
	DATE_REG	DATETIME			not null,
	LAST_AUTH	DATETIME			not null,
	STORED_HASH	varchar(32) 		not null,
	TEMP_HASH	char(1) 			not null,
	IP_ADDR		decimal(18,0)		not null
)
GO

ALTER TABLE B_USER_STORED_AUTH ADD CONSTRAINT PK_B_USER_STORED_AUTH PRIMARY KEY (ID)
GO

CREATE INDEX ux_user_hash ON B_USER_STORED_AUTH(USER_ID, STORED_HASH)
GO

CREATE TABLE B_USER_OPTION
(
	ID int NOT NULL IDENTITY (1, 1),
	USER_ID int NOT NULL,
	CATEGORY varchar(50) NOT NULL,
	NAME varchar(255) NOT NULL,
	VALUE text NULL,
	COMMON char(1) NOT NULL DEFAULT 'N'
)
GO
CREATE UNIQUE INDEX UX_USER_CATEGORY_NAME ON B_USER_OPTION(USER_ID, CATEGORY, NAME)
GO

CREATE TABLE B_USER_FIELD_CONFIRM
(
	ID INT NOT NULL IDENTITY(1, 1),
	USER_ID INT NOT NULL,
	DATE_CHANGE DATETIME NOT NULL,
	FIELD VARCHAR(255) NOT NULL,
	FIELD_VALUE VARCHAR(255) NOT NULL,
	CONFIRM_CODE VARCHAR(32) NOT NULL
)
GO
ALTER TABLE B_USER_FIELD_CONFIRM ADD CONSTRAINT PK_B_USER_FIELD_CONFIRM PRIMARY KEY (ID)
GO
CREATE INDEX IX_B_USER_FIELD_CONFIRM1 ON B_USER_FIELD_CONFIRM (USER_ID, CONFIRM_CODE)
GO

CREATE TABLE B_CAPTCHA
(
	ID VARCHAR(32) NOT NULL,
	CODE VARCHAR(20) NOT NULL,
	IP VARCHAR(15) NOT NULL,
	DATE_CREATE DATETIME NOT NULL,
)
GO

CREATE UNIQUE INDEX UX_B_CAPTCHA ON B_CAPTCHA(ID)
GO

CREATE TABLE B_USER_FIELD
(
	ID INT NOT NULL IDENTITY (1, 1),
	ENTITY_ID VARCHAR(20) NULL,
	FIELD_NAME VARCHAR(20) NULL,
	USER_TYPE_ID VARCHAR(50) NULL,
	XML_ID VARCHAR(255) NULL,
	SORT INT,
	MULTIPLE CHAR(1) NOT NULL,
	MANDATORY CHAR(1) NOT NULL,
	SHOW_FILTER CHAR(1) NOT NULL,
	SHOW_IN_LIST CHAR(1) NOT NULL,
	EDIT_IN_LIST CHAR(1) NOT NULL,
	IS_SEARCHABLE CHAR(1) NOT NULL,
	SETTINGS TEXT
)
GO
ALTER TABLE B_USER_FIELD ADD CONSTRAINT PK_B_USER_FIELD PRIMARY KEY (ID)
GO
ALTER TABLE B_USER_FIELD ADD CONSTRAINT DF_B_USER_FIELD_MULTIPLE DEFAULT 'N' FOR MULTIPLE
GO
ALTER TABLE B_USER_FIELD ADD CONSTRAINT DF_B_USER_FIELD_MANDATORY DEFAULT 'N' FOR MANDATORY
GO
ALTER TABLE B_USER_FIELD ADD CONSTRAINT DF_B_USER_FIELD_SHOW_FILTER DEFAULT 'N' FOR SHOW_FILTER
GO
ALTER TABLE B_USER_FIELD ADD CONSTRAINT DF_B_USER_FIELD_SHOW_IN_LIST DEFAULT 'Y' FOR SHOW_IN_LIST
GO
ALTER TABLE B_USER_FIELD ADD CONSTRAINT DF_B_USER_FIELD_EDIT_IN_LIST DEFAULT 'Y' FOR EDIT_IN_LIST
GO
ALTER TABLE B_USER_FIELD ADD CONSTRAINT DF_B_USER_FIELD_IS_SEARCHABLE DEFAULT 'N' FOR IS_SEARCHABLE
GO
CREATE UNIQUE INDEX UX_B_USER_FIELD ON B_USER_FIELD(ENTITY_ID, FIELD_NAME)
GO

CREATE TABLE B_USER_FIELD_LANG
(
	USER_FIELD_ID INT NOT NULL,
	LANGUAGE_ID CHAR(2) NOT NULL,
	EDIT_FORM_LABEL VARCHAR(255),
	LIST_COLUMN_LABEL VARCHAR(255),
	LIST_FILTER_LABEL VARCHAR(255),
	ERROR_MESSAGE VARCHAR(255),
	HELP_MESSAGE VARCHAR(255)
)
GO
ALTER TABLE B_USER_FIELD_LANG ADD CONSTRAINT PK_USER_FIELD_LANG PRIMARY KEY (USER_FIELD_ID, LANGUAGE_ID)
GO
ALTER TABLE B_USER_FIELD_LANG ADD CONSTRAINT FK_B_USER_FIELD_LANG FOREIGN KEY (USER_FIELD_ID) REFERENCES B_USER_FIELD(ID)
GO

CREATE TABLE B_USER_FIELD_ENUM
(
	ID int NOT NULL IDENTITY (1, 1),
	USER_FIELD_ID int NOT NULL,
	VALUE varchar(255) NOT NULL,
	DEF char(1) NOT NULL,
	SORT int NOT NULL,
	XML_ID varchar(255) NOT NULL
)
GO
ALTER TABLE B_USER_FIELD_ENUM ADD CONSTRAINT PK_B_USER_FIELD_ENUM PRIMARY KEY (ID)
GO
ALTER TABLE B_USER_FIELD_ENUM ADD CONSTRAINT FK_B_USER_FIELD_ENUM_DEF DEFAULT 'N' FOR DEF
GO
ALTER TABLE B_USER_FIELD_ENUM ADD CONSTRAINT FK_B_USER_FIELD_ENUM_SORT DEFAULT 500 FOR SORT
GO
ALTER TABLE B_USER_FIELD_ENUM ADD CONSTRAINT FK_B_USER_FIELD_ENUM_1 FOREIGN KEY (USER_FIELD_ID) REFERENCES B_USER_FIELD(ID)
GO
CREATE UNIQUE INDEX IX_B_USER_FIELD_ENUM_1 ON B_USER_FIELD_ENUM (USER_FIELD_ID, XML_ID)
GO

CREATE TABLE B_TASK(
	ID int not null IDENTITY (1,1),
	NAME varchar(100) not null,
	LETTER char(1),
	MODULE_ID VARCHAR(50) not null,
	SYS char(1) not null,
	DESCRIPTION varchar(255),
	BINDING varchar(50) DEFAULT 'module',
	primary key (ID)
)
GO
CREATE INDEX ix_task ON b_task(MODULE_ID, BINDING, LETTER, SYS)
GO

CREATE TABLE B_GROUP_TASK(
	GROUP_ID int not null,
	TASK_ID int not null,
	EXTERNAL_ID varchar(50) NULL,
	primary key (GROUP_ID,TASK_ID)
)
GO
CREATE TABLE B_OPERATION(
	ID int not null IDENTITY (1,1),
	NAME varchar(50) not null,
	MODULE_ID VARCHAR(50) not null,
	DESCRIPTION varchar(255),
	BINDING varchar(50) DEFAULT 'module',
	primary key (ID)
)
GO
CREATE TABLE B_TASK_OPERATION(
	TASK_ID int not null,
	OPERATION_ID int not null,
	primary key (TASK_ID,OPERATION_ID)
)
GO
CREATE TABLE B_GROUP_SUBORDINATE(
	ID int not null,
	AR_SUBGROUP_ID varchar(2000) not null,
	primary key (ID)
)
GO
CREATE TABLE B_RATING
(
	ID int NOT NULL IDENTITY (1, 1),
	ACTIVE char(1) NOT NULL,
	NAME varchar(512) NOT NULL,
	ENTITY_ID varchar(50) NOT NULL,
	CALCULATION_METHOD varchar(3) NOT NULL,
	CREATED datetime NULL,
	LAST_MODIFIED datetime NULL,
	LAST_CALCULATED datetime NULL,
	POSITION char(1) null,
	AUTHORITY char(1) null,
	CALCULATED char(1) NOT NULL,
	CONFIGS text
)
GO
ALTER TABLE B_RATING ADD CONSTRAINT PK_B_RAT PRIMARY KEY (ID)
GO
ALTER TABLE B_RATING ADD CONSTRAINT DF_B_RAT_CALC_METHOD DEFAULT 'SUM' FOR CALCULATION_METHOD
GO
ALTER TABLE B_RATING ADD CONSTRAINT DF_B_RAT_CALC DEFAULT 'N' FOR CALCULATED
GO
ALTER TABLE B_RATING ADD CONSTRAINT DF_B_RATING_POS DEFAULT 'N' FOR POSITION
GO
ALTER TABLE B_RATING ADD CONSTRAINT DF_B_RATING_A DEFAULT 'N' FOR AUTHORITY
GO
ALTER TABLE B_RATING ADD CONSTRAINT DF_B_RAT_ACTIVE DEFAULT 'N' FOR ACTIVE
GO
CREATE TABLE B_RATING_COMPONENT
(
	ID int NOT NULL IDENTITY (1, 1),
	RATING_ID int NOT NULL,
	ACTIVE char(1) NOT NULL,
	ENTITY_ID varchar(50) NOT NULL,
	MODULE_ID varchar(50) NOT NULL,
	RATING_TYPE varchar(50) NOT NULL,
	NAME varchar(50) NOT NULL,
	COMPLEX_NAME varchar(200) NOT NULL,
	CLASS varchar(255) NOT NULL,
	CALC_METHOD varchar(255) NOT NULL,
	EXCEPTION_METHOD varchar(255) NULL,
	LAST_MODIFIED datetime NULL,
	LAST_CALCULATED datetime NULL,
	NEXT_CALCULATION datetime NULL,
	REFRESH_INTERVAL int NOT NULL,
	CONFIG text
)
GO
ALTER TABLE B_RATING_COMPONENT ADD CONSTRAINT PK_B_RAT_COM PRIMARY KEY (ID)
GO
CREATE INDEX IX_B_RAT_COMP_1 ON B_RATING_COMPONENT(RATING_ID, ACTIVE, NEXT_CALCULATION)
GO
ALTER TABLE B_RATING_COMPONENT ADD CONSTRAINT DF_B_RAT_COMP_ACTIVE DEFAULT 'N' FOR ACTIVE
GO
CREATE TABLE B_RATING_COMPONENT_RESULTS
(
	ID int NOT NULL IDENTITY (1, 1),
	RATING_ID int NOT NULL,
	ENTITY_TYPE_ID varchar(50) NOT NULL,
	ENTITY_ID int NOT NULL,
	MODULE_ID varchar(50) NOT NULL,
	RATING_TYPE varchar(50) NOT NULL,
	NAME varchar(50) NOT NULL,
	COMPLEX_NAME varchar(200) NOT NULL,
	CURRENT_VALUE decimal(18, 4) NULL
)
GO
ALTER TABLE B_RATING_COMPONENT_RESULTS ADD CONSTRAINT PK_B_RAT_COMP_RES PRIMARY KEY (ID)
GO
CREATE INDEX IX_B_RAT_COMP_RES_1 ON B_RATING_COMPONENT_RESULTS(RATING_ID, COMPLEX_NAME)
GO
CREATE INDEX IX_B_RAT_COMP_RES_2 ON B_RATING_COMPONENT_RESULTS(COMPLEX_NAME)
GO
CREATE INDEX IX_B_RAT_COMP_RES_3 ON B_RATING_COMPONENT_RESULTS(ENTITY_TYPE_ID)
GO
ALTER TABLE B_RATING_COMPONENT_RESULTS ADD CONSTRAINT DF_B_RAT_COMP_RES_CUR_VALUE DEFAULT '0' FOR CURRENT_VALUE
GO
ALTER TABLE B_RATING_COMPONENT_RESULTS ADD CONSTRAINT DF_B_RAT_COMP_RES_TYPE_ID DEFAULT '0' FOR ENTITY_TYPE_ID
GO
CREATE TABLE B_RATING_RESULTS
(
	ID int NOT NULL IDENTITY (1, 1),
	RATING_ID int NOT NULL,
	ENTITY_TYPE_ID varchar(50) NOT NULL,
	ENTITY_ID varchar(50) NOT NULL,
	CURRENT_VALUE decimal(18, 4) NULL,
	PREVIOUS_VALUE decimal(18, 4) NULL,
	CURRENT_POSITION int NULL,
	PREVIOUS_POSITION int NULL
)
GO
ALTER TABLE B_RATING_RESULTS ADD CONSTRAINT PK_B_RAT_RES PRIMARY KEY (ID)
GO
CREATE INDEX IX_B_RAT_RES_1 ON B_RATING_RESULTS(RATING_ID, ENTITY_TYPE_ID, ENTITY_ID)
GO
CREATE INDEX IX_B_RAT_RES_2 ON B_RATING_RESULTS(RATING_ID, ENTITY_ID)
GO
ALTER TABLE B_RATING_RESULTS ADD CONSTRAINT DF_B_RAT_RES_CUR_VALUE DEFAULT '0' FOR CURRENT_VALUE
GO
ALTER TABLE B_RATING_RESULTS ADD CONSTRAINT DF_B_RAT_RES_PREV_VALUE DEFAULT '0' FOR PREVIOUS_VALUE
GO
ALTER TABLE B_RATING_RESULTS ADD CONSTRAINT DF_B_RAT_RES_CP DEFAULT '0' FOR CURRENT_POSITION
GO
ALTER TABLE B_RATING_RESULTS ADD CONSTRAINT DF_B_RAT_RES_PP DEFAULT '0' FOR PREVIOUS_POSITION
GO
CREATE TABLE B_RATING_VOTE
(
	ID int NOT NULL IDENTITY (1, 1),
	RATING_VOTING_ID int NOT NULL,
	ENTITY_TYPE_ID varchar(50) NOT NULL,
	ENTITY_ID int NOT NULL,
	OWNER_ID int NOT NULL,
	VALUE decimal(18, 4) NOT NULL,
	ACTIVE char(1) NOT NULL,
	CREATED datetime NULL,
	USER_ID int NOT NULL,
	USER_IP varchar(64) NOT NULL,
)
GO
ALTER TABLE B_RATING_VOTE ADD CONSTRAINT PK_B_RAT_VOTE PRIMARY KEY (ID)
GO
CREATE INDEX IX_B_RAT_VOTE ON B_RATING_VOTE(RATING_VOTING_ID, USER_ID)
GO
CREATE INDEX IX_B_RAT_VOTE_2 ON B_RATING_VOTE(ENTITY_TYPE_ID, ENTITY_ID, USER_ID)
GO
CREATE INDEX IX_B_RAT_VOTE_3 ON B_RATING_VOTE(OWNER_ID, CREATED)
GO
CREATE INDEX IX_B_RAT_VOTE_4 ON B_RATING_VOTE(USER_ID)
GO
CREATE INDEX IX_B_RAT_VOTE_5 ON B_RATING_VOTE(CREATED, VALUE)
GO
CREATE INDEX IX_B_RAT_VOTE_6 ON B_RATING_VOTE(ACTIVE)
GO
CREATE INDEX IX_B_RAT_VOTE_7 ON B_RATING_VOTE(RATING_VOTING_ID, CREATED)
GO
CREATE INDEX IX_B_RAT_VOTE_8 ON B_RATING_VOTE(ENTITY_TYPE_ID, CREATED)
GO
CREATE INDEX IX_B_RAT_VOTE_9 ON B_RATING_VOTE(CREATED, USER_ID)
GO
ALTER TABLE B_RATING_VOTE ADD CONSTRAINT DF_B_RAT_VOTE_VALUE DEFAULT '0' FOR VALUE
GO
ALTER TABLE B_RATING_VOTE ADD CONSTRAINT DF_B_RAT_VOTE_ACTIVE DEFAULT 'N' FOR ACTIVE
GO
CREATE TABLE B_RATING_VOTING
(
	ID int NOT NULL IDENTITY (1, 1),
	ENTITY_TYPE_ID varchar(50) NOT NULL,
	ENTITY_ID int NOT NULL,
	OWNER_ID int NOT NULL,
	ACTIVE char(1) NOT NULL,
	CREATED datetime NULL,
	LAST_CALCULATED datetime NULL,
	TOTAL_VALUE decimal(18, 4) NOT NULL,
	TOTAL_VOTES int NOT NULL,
	TOTAL_POSITIVE_VOTES int NOT NULL,
	TOTAL_NEGATIVE_VOTES int NOT NULL
)
GO
ALTER TABLE B_RATING_VOTING ADD CONSTRAINT PK_B_RAT_VOTING PRIMARY KEY (ID)
GO
CREATE INDEX IX_B_RAT_VOTING ON B_RATING_VOTING(ENTITY_TYPE_ID, ENTITY_ID, ACTIVE)
GO
CREATE INDEX IX_ENTITY_TYPE_ID_4 ON B_RATING_VOTING(TOTAL_VALUE)
GO
ALTER TABLE B_RATING_VOTING ADD CONSTRAINT DF_B_RAT_VOT_TOTAL_VALUE DEFAULT '0' FOR TOTAL_VALUE
GO
ALTER TABLE B_RATING_VOTING ADD CONSTRAINT DF_B_RAT_VOT_ACTIVE DEFAULT 'N' FOR ACTIVE
GO
CREATE TABLE B_RATING_VOTING_PREPARE
(
	ID int NOT NULL IDENTITY (1, 1),
	RATING_VOTING_ID int NOT NULL,
	TOTAL_VALUE decimal(18, 4) NOT NULL,
	TOTAL_VOTES int NOT NULL,
	TOTAL_POSITIVE_VOTES int NOT NULL,
	TOTAL_NEGATIVE_VOTES int NOT NULL
)
GO
ALTER TABLE B_RATING_VOTING_PREPARE ADD CONSTRAINT PK_B_RAT_VOTING_PR PRIMARY KEY (ID)
GO
CREATE INDEX IX_B_RAT_VOTING_PR ON B_RATING_VOTING_PREPARE(RATING_VOTING_ID)
GO
ALTER TABLE B_RATING_VOTING_PREPARE ADD CONSTRAINT DF_B_RAT_VOTPR_TOTAL_VALUE DEFAULT '0' FOR TOTAL_VALUE
GO
CREATE TABLE B_RATING_PREPARE
(
	ID int NULL
)
GO
CREATE TABLE B_RATING_RULE
(
	ID int NOT NULL IDENTITY (1, 1),
	ACTIVE char(1) NOT NULL,
	NAME varchar(512) NOT NULL,
	ENTITY_TYPE_ID varchar(50) NOT NULL,
	CONDITION_NAME varchar(200) NOT NULL,
	CONDITION_MODULE varchar(50) NULL,
	CONDITION_CLASS varchar(255) NOT NULL,
	CONDITION_METHOD varchar(255) NOT NULL,
	CONDITION_CONFIG text,
	ACTION_NAME varchar(200) NOT NULL,
	ACTION_CONFIG text,
	ACTIVATE char(1) NOT NULL,
	ACTIVATE_CLASS varchar(255) NOT NULL,
	ACTIVATE_METHOD varchar(255) NOT NULL,
	DEACTIVATE char(1) NOT NULL,
	DEACTIVATE_CLASS varchar(255) NOT NULL,
	DEACTIVATE_METHOD varchar(255) NOT NULL,
	CREATED datetime NULL,
	LAST_MODIFIED datetime NULL,
	LAST_APPLIED datetime NULL,
)
GO
ALTER TABLE B_RATING_RULE ADD CONSTRAINT PK_B_RR PRIMARY KEY (ID)
GO
ALTER TABLE B_RATING_RULE ADD CONSTRAINT DF_B_RR_ACTIVE DEFAULT 'N' FOR ACTIVE
GO
ALTER TABLE B_RATING_RULE ADD CONSTRAINT DF_B_RR_ACTIVATE DEFAULT 'N' FOR ACTIVATE
GO
ALTER TABLE B_RATING_RULE ADD CONSTRAINT DF_B_RR_DEACTIVATE DEFAULT 'N' FOR DEACTIVATE
GO
CREATE TABLE B_RATING_RULE_VETTING
(
	ID int NOT NULL IDENTITY (1, 1),
	RULE_ID int NOT NULL,
	ENTITY_TYPE_ID varchar(50) NOT NULL,
	ENTITY_ID int NOT NULL,
	ACTIVATE char(1) NOT NULL,
	APPLIED char(1) NOT NULL,
)
GO
ALTER TABLE B_RATING_RULE_VETTING ADD CONSTRAINT PK_B_RRV PRIMARY KEY (ID)
GO
CREATE INDEX IX_B_RRV ON B_RATING_RULE_VETTING(RULE_ID, ENTITY_TYPE_ID, ENTITY_ID)
GO
ALTER TABLE B_RATING_RULE_VETTING ADD CONSTRAINT DF_B_RRV_ACTIVATE DEFAULT 'N' FOR ACTIVATE
GO
ALTER TABLE B_RATING_RULE_VETTING ADD CONSTRAINT DF_B_RRV_APPLIED DEFAULT 'N' FOR APPLIED
GO
CREATE TABLE B_RATING_USER
(
	ID int NOT NULL IDENTITY (1, 1),
	RATING_ID int NOT NULL,
	ENTITY_ID int NOT NULL,
	BONUS decimal(18, 4) NULL,
	VOTE_WEIGHT decimal(18, 4) NULL,
    VOTE_COUNT int NULL
)
GO
ALTER TABLE B_RATING_USER ADD CONSTRAINT PK_B_RAT_USER PRIMARY KEY (ID)
GO
CREATE INDEX IX_B_RAT_USER ON B_RATING_USER(RATING_ID, ENTITY_ID)
GO
CREATE INDEX IX_B_RAT_USER_2 ON B_RATING_USER(ENTITY_ID)
GO
ALTER TABLE B_RATING_USER ADD CONSTRAINT DF_B_RAT_USER_BONUS DEFAULT '0.0000' FOR BONUS
GO
ALTER TABLE B_RATING_USER ADD CONSTRAINT DF_B_RAT_USER_VW DEFAULT '0.0000' FOR VOTE_WEIGHT
GO
ALTER TABLE B_RATING_USER ADD CONSTRAINT DF_B_RAT_USER_VC DEFAULT '0' FOR VOTE_COUNT
GO
CREATE TABLE B_RATING_VOTE_GROUP
(
	ID int NOT NULL IDENTITY (1, 1),
	GROUP_ID int NOT NULL,
	TYPE char(1) NOT NULL
)
GO
ALTER TABLE B_RATING_VOTE_GROUP ADD CONSTRAINT PK_B_RAT_VOTE_GROUP PRIMARY KEY (ID)
GO
CREATE INDEX IX_B_RAT_VOTE_GROUP ON B_RATING_VOTE_GROUP(GROUP_ID, TYPE)
GO
CREATE TABLE B_RATING_WEIGHT
(
	ID int NOT NULL IDENTITY (1, 1),
	RATING_FROM decimal(18, 4) NOT NULL,
	RATING_TO decimal(18, 4) NOT NULL,
	WEIGHT decimal(18, 4) NULL,
	COUNT int NULL,
)
GO
ALTER TABLE B_RATING_WEIGHT ADD CONSTRAINT PK_B_RAT_WEIGHT PRIMARY KEY (ID)
GO
ALTER TABLE B_RATING_WEIGHT ADD CONSTRAINT DF_B_RAT_WEIGHT_W DEFAULT '0' FOR WEIGHT
GO
ALTER TABLE B_RATING_WEIGHT ADD CONSTRAINT DF_B_RAT_WEIGHT_C DEFAULT '0' FOR COUNT
GO
insert into B_RATING_WEIGHT (RATING_FROM, RATING_TO, WEIGHT, COUNT) VALUES (-1000000, 1000000, 1, 10)
GO

CREATE TABLE B_EVENT_LOG
(
	ID INT NOT NULL IDENTITY (1,1),
	TIMESTAMP_X  DATETIME null,
	SEVERITY VARCHAR(50) not null,
	AUDIT_TYPE_ID VARCHAR(50) not null,
	MODULE_ID VARCHAR(50) not null,
	ITEM_ID VARCHAR(255) not null,
	REMOTE_ADDR VARCHAR(40),
	USER_AGENT VARCHAR(2000),
	REQUEST_URI VARCHAR(2000),
	SITE_ID CHAR(2),
	USER_ID INT,
	GUEST_ID INT,
	DESCRIPTION TEXT
)
GO
ALTER TABLE B_EVENT_LOG ADD CONSTRAINT PK_B_EVENT_LOG PRIMARY KEY (ID)
GO
ALTER TABLE B_EVENT_LOG ADD CONSTRAINT DF_B_EVENT_LOG_TIMESTAMP_X DEFAULT GETDATE() FOR TIMESTAMP_X
GO
CREATE INDEX IX_B_EVENT_LOG_TIME ON B_EVENT_LOG (TIMESTAMP_X)
GO
create trigger B_EVENT_LOG_UPDATE on B_EVENT_LOG for update as
if (not update(TIMESTAMP_X))
begin
	UPDATE B_EVENT_LOG SET
		TIMESTAMP_X = GETDATE()
	FROM
		B_EVENT_LOG U,
		INSERTED I,
		DELETED D
	WHERE
		U.ID = I.ID
		and U.ID = D.ID
end

if @@error <>0
begin
	raiserror('Trigger B_EVENT_LOG_UPDATE Error', 16, 1)
end
GO

CREATE TABLE B_CACHE_TAG
(
	SITE_ID char(2),
	CACHE_SALT char(4),
	RELATIVE_PATH varchar(255),
	TAG varchar(100)
)
GO
CREATE INDEX IX_B_CACHE_TAG_0 ON B_CACHE_TAG (SITE_ID, CACHE_SALT, RELATIVE_PATH)
GO
CREATE INDEX IX_B_CACHE_TAG_1 ON B_CACHE_TAG (TAG)
GO

CREATE TABLE B_USER_HIT_AUTH
(
	ID int NOT NULL IDENTITY (1, 1),
	USER_ID int NOT NULL,
	HASH varchar(32) NOT NULL,
	URL varchar(255) NOT NULL,
	SITE_ID char(2) NULL,
	TIMESTAMP_X datetime NOT NULL,
)
GO
ALTER TABLE B_USER_HIT_AUTH ADD CONSTRAINT PK_B_USER_HIT_AUTH PRIMARY KEY (ID)
GO
CREATE INDEX IX_USER_HIT_AUTH_1 ON B_USER_HIT_AUTH(HASH)
GO
CREATE INDEX IX_USER_HIT_AUTH_2 ON B_USER_HIT_AUTH(USER_ID)
GO
CREATE INDEX IX_USER_HIT_AUTH_3 ON B_USER_HIT_AUTH(TIMESTAMP_X)
GO
ALTER TABLE B_USER_HIT_AUTH ADD CONSTRAINT DF_B_USER_HIT_AUTH_SITE_ID DEFAULT NULL FOR SITE_ID
GO

CREATE TABLE b_undo
(
	ID varchar(255) not null,
	MODULE_ID varchar(50) null,
	UNDO_TYPE varchar(50) null,
	UNDO_HANDLER varchar(255) null,
	CONTENT text null,
	USER_ID int null,
	TIMESTAMP_X int null,
	primary key (ID)
)
GO

CREATE TABLE B_USER_DIGEST
(
	USER_ID int NOT NULL,
	DIGEST_HA1 varchar(32) NOT NULL,
	primary key (USER_ID)
)
GO

CREATE TABLE B_CHECKLIST
(
	ID int not null IDENTITY (1,1),
	DATE_CREATE varchar(255) null,
	TESTER varchar(255) null,
	COMPANY_NAME varchar(255) null,
	PICTURE int null,
	TOTAL int null,
	SUCCESS int null,
	FAILED int null,
	PENDING int null,
	SKIP int null,
	STATE text,
	REPORT_COMMENT text,
	REPORT char(1) null,
	EMAIL varchar(50) NULL,
	PHONE varchar(50) NULL,
	SENDED_TO_BITRIX char(1) NULL DEFAULT 'N',
	HIDDEN char(1) NULL DEFAULT 'N'
)
GO
ALTER TABLE B_CHECKLIST ADD CONSTRAINT PK_b_checklist PRIMARY KEY (ID)
GO

CREATE TABLE B_SHORT_URI
(
	ID int not null IDENTITY (1,1),
	URI varchar(250) not null,
	URI_CRC int not null,
	SHORT_URI varchar(250) not null,
	SHORT_URI_CRC int not null,
	STATUS int not null default 301,
	MODIFIED datetime not null,
	LAST_USED datetime null,
	NUMBER_USED int not null default 0,
	primary key (ID)
)
GO
CREATE INDEX UX_B_SHORT_URI_1 ON B_SHORT_URI(SHORT_URI_CRC)
GO
CREATE INDEX UX_B_SHORT_URI_2 ON B_SHORT_URI(URI_CRC)
GO

CREATE TABLE B_USER_ACCESS
(
	USER_ID int,
	PROVIDER_ID varchar(50),
	ACCESS_CODE varchar(100)
)
GO
CREATE INDEX ix_ua_user_provider ON B_USER_ACCESS(USER_ID, PROVIDER_ID)
GO
CREATE INDEX ix_ua_user_access ON B_USER_ACCESS(USER_ID, ACCESS_CODE)
GO
CREATE INDEX ix_ua_access ON B_USER_ACCESS(ACCESS_CODE)
GO
insert into b_user_access (USER_ID, PROVIDER_ID, ACCESS_CODE) values(0, 'group', 'G2')
GO

CREATE TABLE B_USER_ACCESS_CHECK
(
	USER_ID int,
	PROVIDER_ID varchar(50)
)
GO
CREATE INDEX ix_uac_user_provider ON B_USER_ACCESS_CHECK(USER_ID, PROVIDER_ID)
GO

CREATE TABLE B_USER_COUNTER
(
	USER_ID int not null,
	SITE_ID char(2) not null,
	CODE varchar(50) not null,
	CNT int not null,
	LAST_DATE datetime,
	TIMESTAMP_X datetime not null,
	TAG varchar(255) NULL,
	PARAMS text NULL,
	SENT char(1) NULL
)
GO
ALTER TABLE B_USER_COUNTER ADD CONSTRAINT PK_B_USER_COUNTER PRIMARY KEY (USER_ID, SITE_ID, CODE)
GO
ALTER TABLE B_USER_COUNTER ADD CONSTRAINT DF_B_USER_COUNTER_CNT DEFAULT 0 FOR CNT
GO
ALTER TABLE B_USER_COUNTER ADD CONSTRAINT DF_B_USER_COUNTER_SITE_ID DEFAULT '**' FOR SITE_ID
GO
ALTER TABLE B_USER_COUNTER ADD CONSTRAINT DF_B_USER_COUNTER_TIMESTAMP_X DEFAULT CONVERT(DATETIME, '3000-01-01 00:00:00', 121) FOR TIMESTAMP_X
GO
ALTER TABLE B_USER_COUNTER ADD CONSTRAINT DF_B_USER_COUNTER_SENT DEFAULT '0' FOR SENT
GO
CREATE INDEX ix_buc_tag ON B_USER_COUNTER(TAG)
GO
CREATE INDEX ix_buc_code ON B_USER_COUNTER(CODE)
GO
CREATE INDEX ix_buc_ts ON B_USER_COUNTER(TIMESTAMP_X)
GO
CREATE INDEX ix_buc_sent_userid ON B_USER_COUNTER(SENT, USER_ID)
GO


CREATE TABLE b_hot_keys_code
(
  ID int NOT NULL IDENTITY (1,1),
  CLASS_NAME varchar(50) NULL,
  CODE varchar(255) NULL,
  NAME varchar(255) DEFAULT NULL,
  COMMENTS varchar(255) DEFAULT NULL,
  TITLE_OBJ varchar(50) DEFAULT NULL,
  URL varchar(255) DEFAULT NULL,
  IS_CUSTOM int NOT NULL DEFAULT 1,
  PRIMARY KEY (ID)
)
GO
CREATE INDEX ix_hot_keys_code_cn ON b_hot_keys_code(CLASS_NAME)
GO
CREATE INDEX ix_hot_keys_code_url ON b_hot_keys_code(URL)
GO

SET IDENTITY_INSERT b_hot_keys_code ON
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(3, 'CAdminTabControl', 'NextTab();', 'HK_DB_CADMINTC', 'HK_DB_CADMINTC_C', 'tab-container', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(5, 'btn_new', 'var d=BX (''btn_new''); if (d) location.href = d.href;', 'HK_DB_BUT_ADD', 'HK_DB_BUT_ADD_C', 'btn_new', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(6, 'btn_excel', 'var d=BX(''btn_excel''); if (d) location.href = d.href;', 'HK_DB_BUT_EXL', 'HK_DB_BUT_EXL_C', 'btn_excel', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(7, 'btn_settings', 'var d=BX(''btn_settings''); if (d) location.href = d.href;', 'HK_DB_BUT_OPT', 'HK_DB_BUT_OPT_C', 'btn_settings', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(8, 'btn_list', 'var d=BX(''btn_list''); if (d) location.href = d.href;', 'HK_DB_BUT_LST', 'HK_DB_BUT_LST_C', 'btn_list', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(9, 'Edit_Save_Button', 'var d=BX .findChild(document, {attribute: {''name'': ''save''}}, true );  if (d) d.click();', 'HK_DB_BUT_SAVE', 'HK_DB_BUT_SAVE_C', 'Edit_Save_Button', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(10, 'btn_delete', 'var d=BX(''btn_delete''); if (d) location.href = d.href;', 'HK_DB_BUT_DEL', 'HK_DB_BUT_DEL_C', 'btn_delete', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(12, 'CAdminFilter', 'var d=BX .findChild(document, {attribute: {''name'': ''find''}}, true ); if (d) d.focus();', 'HK_DB_FLT_FND', 'HK_DB_FLT_FND_C', 'find', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(13, 'CAdminFilter', 'var d=BX .findChild(document, {attribute: {''name'': ''set_filter''}}, true );  if (d) d.click();', 'HK_DB_FLT_BUT_F', 'HK_DB_FLT_BUT_F_C', 'set_filter', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(14, 'CAdminFilter', 'var d=BX .findChild(document, {attribute: {''name'': ''del_filter''}}, true );  if (d) d.click();', 'HK_DB_FLT_BUT_CNL', 'HK_DB_FLT_BUT_CNL_C', 'del_filter', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(15, 'bx-panel-admin-button-help-icon-id', 'var d=BX(''bx-panel-admin-button-help-icon-id''); if (d) location.href = d.href;', 'HK_DB_BUT_HLP', 'HK_DB_BUT_HLP_C', 'bx-panel-admin-button-help-icon-id', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(17, 'Global', 'BXHotKeys.ShowSettings();', 'HK_DB_SHW_L', 'HK_DB_SHW_L_C', 'bx-panel-hotkeys', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(19, 'Edit_Apply_Button', 'var d=BX .findChild(document, {attribute: {''name'': ''apply''}}, true );  if (d) d.click();', 'HK_DB_BUT_APPL', 'HK_DB_BUT_APPL_C', 'Edit_Apply_Button', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(20, 'Edit_Cancel_Button', 'var d=BX .findChild(document, {attribute: {''name'': ''cancel''}}, true );  if (d) d.click();', 'HK_DB_BUT_CANCEL', 'HK_DB_BUT_CANCEL_C', 'Edit_Cancel_Button', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(78, 'top_panel_templ_site', '', '-=AUTONAME=-', NULL, 'top_panel_templ_site', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(77, 'top_panel_templ_templ_css', '', '-=AUTONAME=-', NULL, 'top_panel_templ_templ_css', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(76, 'top_panel_templ_site_css', '', '-=AUTONAME=-', NULL, 'top_panel_templ_site_css', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(74, 'top_panel_cache_not', '', '-=AUTONAME=-', NULL, 'top_panel_cache_not', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(75, 'top_panel_edit_mode', '', '-=AUTONAME=-', NULL, 'top_panel_edit_mode', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(73, 'top_panel_cache_comp', '', '-=AUTONAME=-', NULL, 'top_panel_cache_comp', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(72, 'top_panel_cache_page', '', '-=AUTONAME=-', NULL, 'top_panel_cache_page', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(71, 'main_top_panel_struct_panel', '', '-=AUTONAME=-', NULL, 'main_top_panel_struct_panel', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(70, 'top_panel_access_folder_new', '', '-=AUTONAME=-', NULL, 'top_panel_access_folder_new', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(68, 'top_panel_del_page', '', '-=AUTONAME=-', NULL, 'top_panel_del_page', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(69, 'top_panel_folder_prop', '', '-=AUTONAME=-', NULL, 'top_panel_folder_prop', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(82, 'top_panel_debug_incl', '', '-=AUTONAME=-', NULL, 'top_panel_debug_incl', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(67, 'top_panel_edit_page_php', '', '-=AUTONAME=-', NULL, 'top_panel_edit_page_php', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(65, 'top_panel_edit_page_html', '', '-=AUTONAME=-', NULL, 'top_panel_edit_page_html', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(63, 'top_panel_edit_page', '', '-=AUTONAME=-', NULL, 'top_panel_edit_page', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(64, 'top_panel_page_prop', '', '-=AUTONAME=-', NULL, 'top_panel_page_prop', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(62, 'top_panel_create_folder', '', '-=AUTONAME=-', NULL, 'top_panel_create_folder', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(60, 'top_panel_create_page', '', '-=AUTONAME=-', NULL, 'top_panel_create_page', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(58, 'top_panel_bizproc_tasks', '', '-=AUTONAME=-', NULL, 'top_panel_bizproc_tasks', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(57, 'top_panel_help', '', '-=AUTONAME=-', NULL, 'top_panel_help', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(59, 'top_panel_add_fav', '', '-=AUTONAME=-', NULL, 'top_panel_add_fav', NULL, 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(56, 'top_panel_interface_settings', '', '-=AUTONAME=-', NULL, 'top_panel_interface_settings', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(54, 'top_panel_org_fav', '', '-=AUTONAME=-', NULL, 'top_panel_org_fav', NULL, 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(55, 'top_panel_module_settings', '', '-=AUTONAME=-', NULL, 'top_panel_module_settings', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(83, 'top_panel_debug_sql', '', '-=AUTONAME=-', NULL, 'top_panel_debug_sql', NULL, 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(81, 'top_panel_debug_time', '', '-=AUTONAME=-', NULL, 'top_panel_debug_time', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(84, 'top_panel_debug_compr', '', '-=AUTONAME=-', NULL, 'top_panel_debug_compr', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(85, 'MTP_SHORT_URI1', '', '-=AUTONAME=-', NULL, 'MTP_SHORT_URI1', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(86, 'MTP_SHORT_URI_LIST', '', '-=AUTONAME=-', NULL, 'MTP_SHORT_URI_LIST', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(87, 'FMST_PANEL_STICKER_ADD', '', '-=AUTONAME=-', NULL, 'FMST_PANEL_STICKER_ADD', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(88, 'FMST_PANEL_STICKERS_SHOW', '', '-=AUTONAME=-', NULL, 'FMST_PANEL_STICKERS_SHOW', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(89, 'FMST_PANEL_CUR_STICKER_LIST', '', '-=AUTONAME=-', NULL, 'FMST_PANEL_CUR_STICKER_LIST', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(90, 'FMST_PANEL_ALL_STICKER_LIST', '', '-=AUTONAME=-', NULL, 'FMST_PANEL_ALL_STICKER_LIST', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(91, 'top_panel_menu', 'var d=BX("bx-panel-menu"); if (d) d.click();', '-=AUTONAME=-', NULL, 'bx-panel-menu', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(92, 'top_panel_admin', 'var d=BX(''bx-panel-admin-tab''); if (d) location.href = d.href;', '-=AUTONAME=-', NULL, 'bx-panel-admin-tab', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(93, 'admin_panel_site', 'var d=BX(''bx-panel-view-tab''); if (d) location.href = d.href;', '-=AUTONAME=-', NULL, 'bx-panel-view-tab', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(94, 'admin_panel_admin', 'var d=BX(''bx-panel-admin-tab''); if (d) location.href = d.href;', '-=AUTONAME=-', NULL, 'bx-panel-admin-tab', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(111, 'top_panel_create_new', '', '-=AUTONAME=-', NULL, 'top_panel_create_new', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(96, 'top_panel_folder_prop_new', '', '-=AUTONAME=-', NULL, 'top_panel_folder_prop_new', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(97, 'main_top_panel_structure', '', '-=AUTONAME=-', NULL, 'main_top_panel_structure', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(98, 'top_panel_clear_cache', '', '-=AUTONAME=-', NULL, 'top_panel_clear_cache', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(99, 'top_panel_templ', '', '-=AUTONAME=-', NULL, 'top_panel_templ', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(100, 'top_panel_debug', '', '-=AUTONAME=-', NULL, 'top_panel_debug', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(101, 'MTP_SHORT_URI', '', '-=AUTONAME=-', NULL, 'MTP_SHORT_URI', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(102, 'FMST_PANEL_STICKERS', '', '-=AUTONAME=-', NULL, 'FMST_PANEL_STICKERS', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(103, 'top_panel_settings', '', '-=AUTONAME=-', NULL, 'top_panel_settings', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(104, 'top_panel_fav', '', '-=AUTONAME=-', NULL, 'top_panel_fav', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(106, 'Global', 'location.href=''/bitrix/admin/hot_keys_list.php?lang=ru'';', 'HK_DB_SHW_HK', '', '', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(107, 'top_panel_edit_new', '', '-=AUTONAME=-', NULL, 'top_panel_edit_new', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(108, 'FLOW_PANEL_CREATE_WITH_WF', '', '-=AUTONAME=-', NULL, 'FLOW_PANEL_CREATE_WITH_WF', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(109, 'FLOW_PANEL_EDIT_WITH_WF', '', '-=AUTONAME=-', NULL, 'FLOW_PANEL_EDIT_WITH_WF', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(110, 'FLOW_PANEL_HISTORY', '', '-=AUTONAME=-', NULL, 'FLOW_PANEL_HISTORY', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(112, 'top_panel_create_folder_new', '', '-=AUTONAME=-', NULL, 'top_panel_create_folder_new', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(139, 'Global', 'location.href=''/bitrix/admin/user_admin.php?lang=''+phpVars.LANGUAGE_ID;', 'HK_DB_SHW_U', '', '', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(116, 'bx-panel-toggle', '', '-=AUTONAME=-', NULL, 'bx-panel-toggle', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(118, 'bx-panel-expander', 'var d=BX(''bx-panel-expander''); if (d) BX.fireEvent(d, ''click'');', '-=AUTONAME=-', NULL, 'bx-panel-expander', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(117, 'bx-panel-small-toggle', '', '-=AUTONAME=-', NULL, 'bx-panel-small-toggle', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(119, 'bx-panel-hider', 'var d=BX(''bx-panel-hider''); if (d) d.click();', '-=AUTONAME=-', NULL, 'bx-panel-hider', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(120, 'search-textbox-input', 'var d=BX(''search-textbox-input''); if (d) { d.click(); d.focus();}', '-=AUTONAME=-', '', 'search', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(121, 'bx-search-input', 'var d=BX(''bx-search-input''); if (d) { d.click(); d.focus(); }', '-=AUTONAME=-', '', 'bx-search-input', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(133, 'bx-panel-logout', 'var d=BX(''bx-panel-logout''); if (d) location.href = d.href;', '-=AUTONAME=-', '', 'bx-panel-logout', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(138, 'CDialog', 'var d=BX(''btn_popup_save''); if (d) d.click();', 'HK_DB_D_EDIT_SAVE', '', 'btn_popup_save', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(135, 'CDialog', 'var d=BX(''cancel''); if (d) d.click();', 'HK_DB_D_CANCEL', '', 'cancel', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(136, 'CDialog', 'var d=BX(''close''); if (d) d.click();', 'HK_DB_D_CLOSE', '', 'close', '', 0)
GO
INSERT INTO b_hot_keys_code (ID, CLASS_NAME, CODE, NAME, COMMENTS, TITLE_OBJ, URL, IS_CUSTOM) VALUES(137, 'CDialog', 'var d=BX(''savebtn''); if (d) d.click();', 'HK_DB_D_SAVE', '', 'savebtn', '', 0)
GO
SET IDENTITY_INSERT b_hot_keys_code OFF
GO

CREATE TABLE b_hot_keys
(
  ID int NOT NULL IDENTITY (1,1),
  KEYS_STRING varchar(20) NOT NULL,
  CODE_ID int NOT NULL,
  USER_ID int NOT NULL,
  PRIMARY KEY (ID)
)
GO
CREATE INDEX ix_hot_keys_code ON b_hot_keys (CODE_ID)
GO
CREATE INDEX ix_hot_keys_user ON b_hot_keys (USER_ID)
GO
CREATE UNIQUE INDEX ix_b_hot_keys_co_u ON b_hot_keys (CODE_ID,USER_ID)
GO


INSERT INTO b_hot_keys (KEYS_STRING, CODE_ID, USER_ID) VALUES('Ctrl+Alt+85', 139, 0)
GO
INSERT INTO b_hot_keys (KEYS_STRING, CODE_ID, USER_ID) VALUES('Ctrl+Alt+80', 17, 0)
GO
INSERT INTO b_hot_keys (KEYS_STRING, CODE_ID, USER_ID) VALUES('Ctrl+Alt+70', 120, 0)
GO
INSERT INTO b_hot_keys (KEYS_STRING, CODE_ID, USER_ID) VALUES('Ctrl+Alt+68', 117, 0)
GO
INSERT INTO b_hot_keys (KEYS_STRING, CODE_ID, USER_ID) VALUES('Ctrl+Alt+81', 3, 0)
GO
INSERT INTO b_hot_keys (KEYS_STRING, CODE_ID, USER_ID) VALUES('Ctrl+Alt+75', 106, 0)
GO
INSERT INTO b_hot_keys (KEYS_STRING, CODE_ID, USER_ID) VALUES('Ctrl+Alt+79', 133, 0)
GO
INSERT INTO b_hot_keys (KEYS_STRING, CODE_ID, USER_ID) VALUES('Ctrl+Alt+70', 121, 0)
GO
INSERT INTO b_hot_keys (KEYS_STRING, CODE_ID, USER_ID) VALUES('Ctrl+Alt+69', 118, 0)
GO


CREATE TABLE B_ADMIN_NOTIFY
(
  ID int NOT NULL IDENTITY (1, 1),
  MODULE_ID varchar(50) NULL,
  TAG varchar(255) NULL,
  MESSAGE text NULL,
  ENABLE_CLOSE char(1) NULL,
  PUBLIC_SECTION char(1) NOT NULL,
  NOTIFY_TYPE char(1) NOT NULL
)
GO
ALTER TABLE B_ADMIN_NOTIFY ADD CONSTRAINT PK_B_AN_ID PRIMARY KEY (ID)
GO
CREATE INDEX IX_AN_TAG ON B_ADMIN_NOTIFY(TAG)
GO
ALTER TABLE B_ADMIN_NOTIFY ADD CONSTRAINT DF_B_AN_EC DEFAULT 'Y' FOR ENABLE_CLOSE
GO
ALTER TABLE B_ADMIN_NOTIFY ADD CONSTRAINT DF_B_AN_PS DEFAULT 'N' FOR PUBLIC_SECTION
GO
ALTER TABLE B_ADMIN_NOTIFY ADD CONSTRAINT DF_B_AN_NT DEFAULT 'M' FOR NOTIFY_TYPE
GO

CREATE TABLE B_ADMIN_NOTIFY_LANG
(
	ID int NOT NULL IDENTITY (1, 1),
	NOTIFY_ID int NOT NULL,
	LID varchar(2) NOT NULL,
	MESSAGE text
)
GO
ALTER TABLE B_ADMIN_NOTIFY_LANG ADD CONSTRAINT PK_B_ANL_ID PRIMARY KEY (ID)
GO
CREATE INDEX IX_ADM_NTFY_LID ON B_ADMIN_NOTIFY_LANG(LID)
GO
CREATE UNIQUE INDEX IX_ADM_NTFY_LANG ON B_ADMIN_NOTIFY_LANG(NOTIFY_ID, LID)
GO

CREATE TABLE B_FILTERS
(
	ID int NOT NULL IDENTITY (1, 1),
	USER_ID int NULL,
	FILTER_ID varchar(255) NOT NULL,
	NAME varchar(255) NOT NULL,
	FIELDS text NOT NULL,
	COMMON char(1) NULL,
	PRESET char(1) NULL,
	LANGUAGE_ID char(2) NULL,
	PRESET_ID varchar(255) NULL,
	SORT int NULL,
	SORT_FIELD varchar(255) NULL
)
GO
ALTER TABLE B_FILTERS ADD CONSTRAINT PK_B_FILTERS PRIMARY KEY (ID)
GO

CREATE TABLE B_COMPONENT_PARAMS
(
	ID int NOT NULL IDENTITY (1, 1),
	SITE_ID char(2) NOT NULL,
	COMPONENT_NAME varchar(255) NOT NULL,
	TEMPLATE_NAME varchar(255),
	REAL_PATH varchar(255) NOT NULL,
	SEF_MODE char(1) NOT NULL DEFAULT 'Y',
	SEF_FOLDER varchar(255),
	START_CHAR int NOT NULL,
	END_CHAR int NOT NULL,
	PARAMETERS text
)
GO
ALTER TABLE B_COMPONENT_PARAMS ADD CONSTRAINT PK_B_COMPONENT_PARAMS PRIMARY KEY (ID)
GO
CREATE INDEX IX_COMP_PARAMS_NAME ON B_COMPONENT_PARAMS(COMPONENT_NAME)
GO
CREATE INDEX IX_COMP_PARAMS_SNAME ON B_COMPONENT_PARAMS(SITE_ID, COMPONENT_NAME)
GO
CREATE INDEX IX_COMP_PARAMS_PATH ON B_COMPONENT_PARAMS(SITE_ID, REAL_PATH)
GO

CREATE TABLE B_SMILE
(
	ID int NOT NULL IDENTITY (1, 1),
	TYPE char(1) NOT NULL,
	SET_ID int NOT NULL,
	SORT int NOT NULL,
	TYPING varchar(100) NULL,
	CLICKABLE char(1) NOT NULL,
	HIDDEN char(1) NOT NULL,
	IMAGE varchar(255) NOT NULL,
	IMAGE_DEFINITION varchar(10) NOT NULL,
	IMAGE_WIDTH int NOT NULL,
	IMAGE_HEIGHT int NOT NULL
)
GO
ALTER TABLE B_SMILE ADD CONSTRAINT PK_B_SMILE PRIMARY KEY (ID)
GO
ALTER TABLE B_SMILE ADD CONSTRAINT DF_B_SMILE_TYPE DEFAULT 'S' FOR TYPE
GO
ALTER TABLE B_SMILE ADD CONSTRAINT DF_B_SMILE_SET_ID DEFAULT '0' FOR SET_ID
GO
ALTER TABLE B_SMILE ADD CONSTRAINT DF_B_SMILE_CLICKABLE DEFAULT 'Y' FOR CLICKABLE
GO
ALTER TABLE B_SMILE ADD CONSTRAINT DF_B_SMILE_HIDDEN DEFAULT 'N' FOR HIDDEN
GO
ALTER TABLE B_SMILE ADD CONSTRAINT DF_B_SMILE_SORT DEFAULT '150' FOR SORT
GO
ALTER TABLE B_SMILE ADD CONSTRAINT DF_B_SMILE_ID DEFAULT 'SD' FOR IMAGE_DEFINITION
GO
ALTER TABLE B_SMILE ADD CONSTRAINT DF_B_SMILE_IMAGE_WIDTH DEFAULT '0' FOR IMAGE_WIDTH
GO
ALTER TABLE B_SMILE ADD CONSTRAINT DF_B_SMILE_IMAGE_HEIGHT DEFAULT '0' FOR IMAGE_HEIGHT
GO

CREATE TABLE B_SMILE_SET
(
	ID int NOT NULL IDENTITY (1, 1),
	TYPE char(1) NOT NULL,
	PARENT_ID int NOT NULL,
	STRING_ID varchar(255) NULL,
	SORT int NOT NULL
)
GO
ALTER TABLE B_SMILE_SET ADD CONSTRAINT PK_B_SMILE_SET PRIMARY KEY (ID)
GO
ALTER TABLE B_SMILE_SET ADD CONSTRAINT DF_B_SMILE_SET_SORT DEFAULT '150' FOR SORT
GO
ALTER TABLE B_SMILE_SET ADD CONSTRAINT DF_B_SMILE_SET_TYPE DEFAULT 'G' FOR TYPE
GO
ALTER TABLE B_SMILE_SET ADD CONSTRAINT DF_B_SMILE_SET_PID DEFAULT '0' FOR PARENT_ID
GO

CREATE TABLE B_SMILE_LANG
(
	ID int NOT NULL IDENTITY (1, 1),
	TYPE char(1) NOT NULL,
	SID int NOT NULL,
	LID char(2) NOT NULL,
	NAME varchar(255) NOT NULL
)
GO
ALTER TABLE B_SMILE_LANG ADD CONSTRAINT PK_B_SMILE_LANG PRIMARY KEY (ID)
GO
ALTER TABLE B_SMILE_LANG ADD CONSTRAINT DF_B_SMILE_LANG_TYPE DEFAULT 'S' FOR TYPE
GO
CREATE UNIQUE INDEX UX_SMILE_SL ON B_SMILE_LANG (TYPE, SID, LID)
GO

CREATE TABLE b_app_password 
(
	ID INT NOT NULL IDENTITY (1, 1),
	USER_ID INT NOT NULL,
	APPLICATION_ID VARCHAR(255) NOT NULL,
	PASSWORD VARCHAR(255) NOT NULL,
	DIGEST_PASSWORD VARCHAR(255) NOT NULL,
	DATE_CREATE DATETIME NULL,
	DATE_LOGIN DATETIME NULL,
	LAST_IP VARCHAR(255) NULL,
	COMMENT VARCHAR(255) NULL,
	SYSCOMMENT VARCHAR(255) NULL,
	CODE VARCHAR(255) NULL
)
GO
ALTER TABLE b_app_password ADD CONSTRAINT PK_B_APP_PASSWORD PRIMARY KEY (ID)
GO
CREATE INDEX ix_app_password_user ON b_app_password (USER_ID)
GO

CREATE TABLE B_COUNTER_DATA
(
  ID varchar(16) NOT NULL,
  TYPE varchar(30) NOT NULL,
  DATA text NOT NULL,
  PRIMARY KEY (ID)
)
GO

CREATE TABLE B_FINDER_DEST
(
	USER_ID int NOT NULL,
	CODE varchar(30) NOT NULL,
	CODE_USER_ID int NULL,
	CODE_TYPE varchar(10) NULL,
	CONTEXT varchar(50) NOT NULL,
	LAST_USE_DATE DATETIME NULL
)
GO
ALTER TABLE B_FINDER_DEST ADD CONSTRAINT PK_B_FINDER_DEST PRIMARY KEY (USER_ID, CODE, CONTEXT)
GO
CREATE INDEX IX_FINDER_DEST ON B_FINDER_DEST (CODE_TYPE)
GO

CREATE TABLE B_URLPREVIEW_METADATA
(
	ID int IDENTITY(1,1) PRIMARY KEY,
	URL varchar(200) NOT NULL,
	TYPE char(1) NOT NULL DEFAULT 'S',
	DATE_INSERT datetime NOT NULL,
	DATE_EXPIRE datetime NULL,
	TITLE varchar(200) NULL,
	DESCRIPTION text,
	IMAGE_ID int NULL,
	IMAGE varchar(255) NULL,
	EMBED text,
	EXTRA text
)
GO
CREATE INDEX IX_URLPREVIEW_METADATA_URL ON B_URLPREVIEW_METADATA(URL)
GO

CREATE TABLE B_URLPREVIEW_ROUTE
(
	ID int IDENTITY(1,1) PRIMARY KEY,
	ROUTE varchar(200) NOT NULL,
	MODULE varchar(50) NOT NULL,
	CLASS varchar(150) NOT NULL,
	PARAMETERS text
)
GO
CREATE UNIQUE INDEX UX_URLPREVIEW_ROUTE_ROUTE ON B_URLPREVIEW_ROUTE(ROUTE)
GO

CREATE TABLE B_COMPOSITE_PAGE
(
	ID int NOT NULL IDENTITY (1, 1),
	CACHE_KEY varchar(2000) NOT NULL,
	HOST varchar(100) NOT NULL,
	URI varchar(2000) NOT NULL,
	TITLE varchar(250) NULL,
	CREATED datetime NOT NULL,
	CHANGED datetime NOT NULL,
	LAST_VIEWED datetime NOT NULL,
	VIEWS int NOT NULL DEFAULT 0,
	REWRITES int NOT NULL DEFAULT 0,
	SIZE int NOT NULL DEFAULT 0,
	CONSTRAINT PK_B_COMPOSITE_PAGE PRIMARY KEY CLUSTERED(ID ASC)
)
GO

CREATE INDEX IX_B_COMPOSITE_PAGE_CACHE_KEY ON B_COMPOSITE_PAGE(CACHE_KEY)
GO

CREATE INDEX IX_B_COMPOSITE_PAGE_VIEWED ON B_COMPOSITE_PAGE(LAST_VIEWED)
GO

CREATE INDEX IX_B_COMPOSITE_PAGE_HOST ON B_COMPOSITE_PAGE(HOST)
GO

CREATE TABLE B_COMPOSITE_LOG
(
	ID int NOT NULL IDENTITY (1, 1),
	HOST varchar(100) NOT NULL,
	URI varchar(2000) NOT NULL,
	TITLE varchar(250) NULL,
	CREATED datetime NOT NULL,
	TYPE varchar(50) NOT NULL,
	MESSAGE text,
	AJAX char(1) NOT NULL DEFAULT 'N',
	USER_ID int NOT NULL DEFAULT 0,
	PAGE_ID int NOT NULL DEFAULT 0,
	CONSTRAINT PK_B_COMPOSITE_LOG PRIMARY KEY CLUSTERED(ID ASC)
)
GO

CREATE INDEX IX_B_COMPOSITE_LOG_PAGE_ID ON B_COMPOSITE_LOG(PAGE_ID)
GO

CREATE INDEX IX_B_COMPOSITE_LOG_HOST ON B_COMPOSITE_LOG(HOST)
GO

CREATE INDEX IX_B_COMPOSITE_LOG_TYPE ON B_COMPOSITE_LOG(TYPE)
GO