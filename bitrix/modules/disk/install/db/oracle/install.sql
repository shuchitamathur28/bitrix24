CREATE TABLE b_disk_storage
(
	ID number(18) NOT NULL,
	NAME VARCHAR2(100 CHAR),
	CODE VARCHAR2(32 CHAR),
	XML_ID VARCHAR2(50 CHAR),

	MODULE_ID VARCHAR2(32 CHAR) not null,
	ENTITY_TYPE VARCHAR2(100 CHAR) not null,
	ENTITY_ID VARCHAR2(32 CHAR) not null,

	ENTITY_MISC_DATA VARCHAR2(2000 CHAR),
	ROOT_OBJECT_ID NUMBER(18),
	USE_INTERNAL_RIGHTS NUMBER(1),

	SITE_ID CHAR(2 CHAR),

	CONSTRAINT PK_B_DISK_STORAGE PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_storage START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_storage_ins_tr
BEFORE INSERT
ON b_disk_storage
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_storage.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE UNIQUE INDEX IX_DISK_PH_1 ON b_disk_storage (MODULE_ID, ENTITY_TYPE, ENTITY_ID)
/
CREATE INDEX IX_DISK_PH_2 ON b_disk_storage (XML_ID)
/


CREATE TABLE b_disk_object
(
	ID number(18) NOT NULL,
	NAME VARCHAR2(255 CHAR) DEFAULT '' not null,
	TYPE NUMBER(18) not null,
	CODE VARCHAR2(50 CHAR),
	XML_ID VARCHAR2(50 CHAR),
	STORAGE_ID NUMBER(18) not null,
	REAL_OBJECT_ID NUMBER(18),
	PARENT_ID NUMBER(18),
	CONTENT_PROVIDER VARCHAR2(10 CHAR),

	CREATE_TIME DATE not null,
	UPDATE_TIME DATE,
	SYNC_UPDATE_TIME DATE,
	DELETE_TIME DATE,

	CREATED_BY NUMBER(18),
	UPDATED_BY NUMBER(18),
	DELETED_BY NUMBER(18) DEFAULT 0,

	GLOBAL_CONTENT_VERSION NUMBER(18),
	FILE_ID NUMBER(18),
	TYPE_FILE NUMBER(18),
	"SIZE" NUMBER(18),
	EXTERNAL_HASH VARCHAR2(255 CHAR),
	DELETED_TYPE NUMBER(18) DEFAULT 0,

	CONSTRAINT PK_B_DISK_OBJECT PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_object START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_object_ins_tr
BEFORE INSERT
ON b_disk_object
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_object.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_O_1 ON b_disk_object (REAL_OBJECT_ID)
/
CREATE INDEX IX_DISK_O_2 ON b_disk_object (PARENT_ID, DELETED_TYPE, TYPE)
/
CREATE INDEX IX_DISK_O_3 ON b_disk_object (STORAGE_ID, CODE)
/
CREATE INDEX IX_DISK_O_4 ON b_disk_object (STORAGE_ID, DELETED_TYPE)
/
CREATE INDEX IX_DISK_O_5 ON b_disk_object (NAME, PARENT_ID)
/
CREATE INDEX IX_DISK_O_6 ON b_disk_object (STORAGE_ID, XML_ID)
/
CREATE INDEX IX_DISK_O_7 ON b_disk_object (UPDATE_TIME)
/
CREATE INDEX IX_DISK_O_8 ON b_disk_object (SYNC_UPDATE_TIME)
/

CREATE TABLE b_disk_object_lock
(
	ID number(18) NOT NULL,
	TOKEN VARCHAR2(255 CHAR) NOT NULL,
	OBJECT_ID NUMBER(18) not null,
	CREATED_BY NUMBER(18) not null,
	CREATE_TIME DATE not null,
	EXPIRY_TIME DATE,
	TYPE NUMBER(18) not null,
	IS_EXCLUSIVE NUMBER(1),

	CONSTRAINT PK_B_DISK_OBJECT_LOCK PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_object_lock START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_object_lock_ins_tr
BEFORE INSERT
ON b_disk_object_lock
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_object_lock.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_OL_1 ON b_disk_object_lock (OBJECT_ID, IS_EXCLUSIVE)
/
CREATE UNIQUE INDEX IX_DISK_OL_2 ON b_disk_object_lock (TOKEN)
/

CREATE TABLE b_disk_object_ttl
(
	ID number(18) NOT NULL,
	OBJECT_ID NUMBER(18) not null,
	CREATE_TIME DATE not null,
	DEATH_TIME DATE not null,

	CONSTRAINT PK_B_DISK_OBJECT_LOCK PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_object_ttl START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_object_ttl_ins_tr
BEFORE INSERT
ON b_disk_object_ttl
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_object_ttl.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_OTTL_1 ON b_disk_object_ttl (DEATH_TIME, OBJECT_ID)
/

CREATE TABLE b_disk_object_path
(
	ID number(18) NOT NULL,
	PARENT_ID NUMBER(18) not null,
	OBJECT_ID NUMBER(18) not null,
	DEPTH_LEVEL NUMBER(18),
	CONSTRAINT PK_B_DISK_OBJECT_PATH PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_object_path START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_object_path_ins_tr
BEFORE INSERT
ON b_disk_object_path
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_object_path.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE UNIQUE INDEX IX_DISK_OP_1 ON b_disk_object_path (PARENT_ID, DEPTH_LEVEL, OBJECT_ID)
/
CREATE UNIQUE INDEX IX_DISK_OP_2 ON b_disk_object_path (OBJECT_ID, PARENT_ID, DEPTH_LEVEL)
/

CREATE TABLE b_disk_version
(
	ID number(18) NOT NULL,
	OBJECT_ID NUMBER(18) not null,
	FILE_ID NUMBER(18) not null,
	"SIZE" NUMBER(18),
	NAME VARCHAR2(255 CHAR),

	CREATE_TIME DATE not null,
	CREATED_BY NUMBER(18),

	OBJECT_CREATE_TIME DATE,
	OBJECT_CREATED_BY NUMBER(18),
	OBJECT_UPDATE_TIME DATE,
	OBJECT_UPDATED_BY NUMBER(18),
	GLOBAL_CONTENT_VERSION NUMBER(18),

	MISC_DATA VARCHAR2(2000 CHAR),

	CONSTRAINT PK_B_DISK_VERSION PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_version START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_version_ins_tr
BEFORE INSERT
ON b_disk_version
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_version.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_V_1 ON b_disk_version (OBJECT_ID)
/

CREATE TABLE b_disk_right
(
	ID number(18) NOT NULL,
	OBJECT_ID NUMBER(18) not null,
	TASK_ID NUMBER(18) not null,
	ACCESS_CODE VARCHAR2(50 CHAR) not null,
	DOMAIN VARCHAR2(50 CHAR),
	NEGATIVE NUMBER(1) DEFAULT 0 not null,

	CONSTRAINT PK_B_DISK_RIGHT PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_right START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_right_ins_tr
BEFORE INSERT
ON b_disk_right
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_right.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_R_1 ON b_disk_right (OBJECT_ID, NEGATIVE)
/
CREATE INDEX IX_DISK_R_2 ON b_disk_right (ACCESS_CODE, TASK_ID)
/

CREATE TABLE b_disk_simple_right
(
	ID number(18) NOT NULL,
	OBJECT_ID NUMBER(18) not null,
	ACCESS_CODE VARCHAR2(50 CHAR) not null,

	CONSTRAINT PK_B_DISK_SIMPLE_RIGHT PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_simple_right START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_simple_right_ins_tr
BEFORE INSERT
ON b_disk_simple_right
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_simple_right.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_SR_1 ON b_disk_simple_right (OBJECT_ID)
/
CREATE INDEX IX_DISK_SR_2 ON b_disk_simple_right (ACCESS_CODE)
/


CREATE TABLE b_disk_attached_object
(
	ID number(18) NOT NULL,
	OBJECT_ID NUMBER(18) not null,
	VERSION_ID NUMBER(18),

	IS_EDITABLE NUMBER(1) DEFAULT 0 not null,
	ALLOW_EDIT NUMBER(1) DEFAULT 0 not null ,
	ALLOW_AUTO_COMMENT NUMBER(1) DEFAULT 1,

	MODULE_ID VARCHAR2(32 CHAR) not null,
	ENTITY_TYPE VARCHAR2(100 CHAR) not null,
	ENTITY_ID NUMBER(18) not null,

	CREATE_TIME DATE not null,
	CREATED_BY NUMBER(18),

	CONSTRAINT PK_B_DISK_ATTACHED_OBJECT PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_attached_object START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_attached_object_ins_tr
BEFORE INSERT
ON b_disk_attached_object
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_attached_object.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_AO_1 ON b_disk_attached_object (OBJECT_ID, VERSION_ID)
/
CREATE INDEX IX_DISK_AO_2 ON b_disk_attached_object (MODULE_ID, ENTITY_TYPE, ENTITY_ID)
/

CREATE TABLE b_disk_external_link
(
	ID number(18) NOT NULL,
	OBJECT_ID NUMBER(18) not null,
	VERSION_ID NUMBER(18),
	HASH VARCHAR2(32 CHAR) not null,
	PASSWORD VARCHAR2(32 CHAR),
	SALT VARCHAR2(32 CHAR),
	DEATH_TIME DATE,
	DESCRIPTION VARCHAR2(2000 CHAR),
	DOWNLOAD_COUNT NUMBER(18),
	TYPE NUMBER(18),

	CREATE_TIME DATE not null,
	CREATED_BY NUMBER(18),

	CONSTRAINT PK_B_DISK_EXTERNAL_LINK PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_external_link START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_external_link_ins_tr
BEFORE INSERT
ON b_disk_external_link
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_external_link.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_EL_1 ON b_disk_external_link (OBJECT_ID)
/
CREATE INDEX IX_DISK_EL_2 ON b_disk_external_link (HASH)
/
CREATE INDEX IX_DISK_EL_3 ON b_disk_external_link (CREATED_BY)
/

CREATE TABLE b_disk_sharing
(
	ID number(18) NOT NULL,
  PARENT_ID NUMBER(18),
  CREATED_BY NUMBER(18),

  FROM_ENTITY VARCHAR2(50 CHAR) not null,
	TO_ENTITY VARCHAR2(50 CHAR) not null,

	LINK_STORAGE_ID NUMBER(18),
	LINK_OBJECT_ID NUMBER(18),

	REAL_OBJECT_ID NUMBER(18) not null,
	REAL_STORAGE_ID NUMBER(18) not null,

	DESCRIPTION VARCHAR2(2000 CHAR),
	CAN_FORWARD NUMBER(1),
	STATUS NUMBER(18) not null,
	TYPE NUMBER(18) not null,

	TASK_NAME VARCHAR2(50 CHAR),
	IS_EDITABLE NUMBER(1) DEFAULT 0 not null,

	CONSTRAINT PK_B_DISK_SHARING PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_sharing START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_sharing_ins_tr
BEFORE INSERT
ON b_disk_sharing
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_sharing.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_S_1 ON b_disk_sharing (REAL_STORAGE_ID, REAL_OBJECT_ID)
/
CREATE INDEX IX_DISK_S_2 ON b_disk_sharing (FROM_ENTITY)
/
CREATE INDEX IX_DISK_S_3 ON b_disk_sharing (TO_ENTITY)
/
CREATE INDEX IX_DISK_S_4 ON b_disk_sharing (LINK_STORAGE_ID, LINK_OBJECT_ID)
/
CREATE INDEX IX_DISK_S_5 ON b_disk_sharing (TYPE, PARENT_ID)
/

CREATE TABLE b_disk_edit_session
(
	ID number(18) NOT NULL,
	OBJECT_ID NUMBER(18),
	VERSION_ID NUMBER(18),
	USER_ID NUMBER(18) not null,
	OWNER_ID NUMBER(18) not null,
	IS_EXCLUSIVE NUMBER(1),
	SERVICE VARCHAR2(10 CHAR) not null,
	SERVICE_FILE_ID VARCHAR2(255 CHAR) not null,
	SERVICE_FILE_LINK VARCHAR2(2000 CHAR) not null,
	CREATE_TIME DATE not null,

	CONSTRAINT PK_B_DISK_EDIT_SESSION PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_edit_session START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_edit_session_ins_tr
BEFORE INSERT
ON b_disk_edit_session
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_edit_session.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_ES_1 ON b_disk_edit_session (OBJECT_ID, VERSION_ID)
/
CREATE INDEX IX_DISK_ES_2 ON b_disk_edit_session (USER_ID)
/


CREATE TABLE b_disk_show_session
(
	ID number(18) NOT NULL,
	OBJECT_ID NUMBER(18),
	VERSION_ID NUMBER(18),
	USER_ID NUMBER(18) not null,
	OWNER_ID NUMBER(18) not null,
	SERVICE VARCHAR2(10 CHAR) not null,
	SERVICE_FILE_ID VARCHAR2(255 CHAR) not null,
	SERVICE_FILE_LINK VARCHAR2(2000 CHAR) not null,
	ETAG VARCHAR2(255 CHAR),
	CREATE_TIME DATE not null,

	CONSTRAINT PK_B_DISK_SHOW_SESSION PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_show_session START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_show_session_ins_tr
BEFORE INSERT
ON b_disk_show_session
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_show_session.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_SS_1 ON b_disk_show_session (OBJECT_ID, VERSION_ID, USER_ID)
/
CREATE INDEX IX_DISK_SS_2 ON b_disk_show_session (CREATE_TIME)
/


CREATE TABLE b_disk_tmp_file
(
	ID number(18) NOT NULL,
	TOKEN VARCHAR2(32 CHAR) not null,
	FILENAME VARCHAR2(255 CHAR),
	CONTENT_TYPE VARCHAR2(255 CHAR),
	PATH VARCHAR2(255 CHAR),
	BUCKET_ID NUMBER(18),
	"SIZE" NUMBER(18),
	WIDTH NUMBER(18),
	HEIGHT NUMBER(18),
	IS_CLOUD NUMBER(1),
	CREATED_BY NUMBER(18),
	CREATE_TIME DATE not null,

	CONSTRAINT PK_B_DISK_TMP_FILE PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_tmp_file START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_tmp_file_ins_tr
BEFORE INSERT
ON b_disk_tmp_file
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_tmp_file.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_TF_1 ON b_disk_tmp_file (TOKEN)
/

CREATE TABLE b_disk_deleted_log
(
	ID number(18) NOT NULL,
	USER_ID NUMBER(18) not null,
	STORAGE_ID NUMBER(18) not null,
	OBJECT_ID NUMBER(18) not null,
	TYPE NUMBER(18) not null,
	CREATE_TIME DATE not null,

	CONSTRAINT PK_B_DISK_DELETED_LOG PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_deleted_log START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_deleted_log_ins_tr
BEFORE INSERT
ON b_disk_deleted_log
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_deleted_log.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_DL_1 ON b_disk_deleted_log (STORAGE_ID, CREATE_TIME)
/
CREATE INDEX IX_DISK_DL_2 ON b_disk_deleted_log (OBJECT_ID)
/
CREATE TABLE b_disk_cloud_import
(
	ID NUMBER(18) NOT NULL,
	OBJECT_ID NUMBER(18),
	VERSION_ID NUMBER(18),
	TMP_FILE_ID NUMBER(18),
	DOWNLOADED_CONTENT_SIZE NUMBER(18) DEFAULT 0,
	CONTENT_SIZE NUMBER(18) DEFAULT 0,
	CONTENT_URL VARCHAR2(2000 CHAR),
	MIME_TYPE VARCHAR2(255 CHAR),
	USER_ID NUMBER(18) NOT NULL,
	SERVICE VARCHAR2(10 CHAR) NOT NULL,
	SERVICE_OBJECT_ID VARCHAR2(2000 CHAR) NOT NULL,
	ETAG VARCHAR2(255 CHAR),
	CREATE_TIME DATE NOT NULL,

	CONSTRAINT PK_B_DISK_CLOUD_IMPORT PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_cloud_import START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_cloud_imp_ins_tr
BEFORE INSERT
ON b_disk_cloud_import
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_cloud_import.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_CI_1 ON b_disk_cloud_import (OBJECT_ID, VERSION_ID)
/
CREATE INDEX IX_DISK_CI_2 ON b_disk_cloud_import (TMP_FILE_ID)
/
CREATE TABLE b_disk_recently_used
(
	ID number(18) NOT NULL,
	USER_ID NUMBER(18) not null,
	OBJECT_ID NUMBER(18) not null,
	CREATE_TIME DATE not null,

	CONSTRAINT PK_B_DISK_RECENTLY_USED PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_disk_recently_used START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/
CREATE OR REPLACE TRIGGER b_disk_recently_used_ins_tr
BEFORE INSERT
ON b_disk_recently_used
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	SELECT sq_b_disk_recently_used.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE INDEX IX_DISK_RU_1 ON b_disk_recently_used (USER_ID, OBJECT_ID, CREATE_TIME)
/

