CREATE TABLE B_SEARCH_CONTENT
(
	ID NUMBER(18) NOT NULL,
	DATE_CHANGE DATE DEFAULT SYSDATE NOT NULL,
	MODULE_ID VARCHAR2(50 CHAR) NOT NULL,
	ITEM_ID VARCHAR2(255 CHAR) NOT NULL,
	CUSTOM_RANK NUMBER(18) DEFAULT 0 NOT NULL,
	USER_ID NUMBER(18),
	ENTITY_TYPE_ID VARCHAR2(50 CHAR),
	ENTITY_ID VARCHAR2(255 CHAR),
	URL VARCHAR2(2000 CHAR),
	TITLE VARCHAR2(2000 CHAR),
	BODY CLOB,
	TAGS CLOB,
	PARAM1 VARCHAR2(2000 CHAR),
	PARAM2 VARCHAR2(2000 CHAR),
	UPD VARCHAR2(32 CHAR),
	DATE_FROM DATE,
	DATE_TO DATE,
	CONSTRAINT PK_B_SEARCH_CONTENT PRIMARY KEY (ID)
)
/

CREATE UNIQUE INDEX UX_B_SEARCH_CONTENT ON b_search_content(MODULE_ID, ITEM_ID)
/
CREATE INDEX IX_B_SEARCH_CONTENT_2 ON b_search_content (ENTITY_ID, ENTITY_TYPE_ID)
/

CREATE SEQUENCE SQ_B_SEARCH_CONTENT
/

CREATE OR REPLACE TRIGGER B_SEARCH_CONTENT_INSERT
BEFORE INSERT
ON B_SEARCH_CONTENT
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_SEARCH_CONTENT.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE TABLE B_SEARCH_CONTENT_TEXT
(
	SEARCH_CONTENT_ID NUMBER(18) NOT NULL,
	SEARCH_CONTENT_MD5 CHAR(32 CHAR) NOT NULL,
	SEARCHABLE_CONTENT CLOB,
	CONSTRAINT PK_B_SEARCH_CONTENT_TEXT PRIMARY KEY (SEARCH_CONTENT_ID)
)
/

CREATE TABLE B_SEARCH_CONTENT_PARAM
(
	SEARCH_CONTENT_ID NUMBER(18) NOT NULL,
	PARAM_NAME VARCHAR2(100 CHAR) NOT NULL,
	PARAM_VALUE VARCHAR2(100 CHAR) NOT NULL
)
/
CREATE INDEX IX_B_SEARCH_CONTENT_PARAM ON b_search_content_param (SEARCH_CONTENT_ID, PARAM_NAME)
/
CREATE INDEX IX_B_SEARCH_CONTENT_PARAM_1 ON b_search_content_param(PARAM_NAME, PARAM_VALUE, SEARCH_CONTENT_ID)
/

CREATE TABLE B_SEARCH_CONTENT_RIGHT
(
	SEARCH_CONTENT_ID NUMBER(18) NOT NULL,
	GROUP_CODE VARCHAR2(100 CHAR) NOT NULL,
	CONSTRAINT PK_B_SEARCH_CONTENT_RIGHT PRIMARY KEY (SEARCH_CONTENT_ID, GROUP_CODE)
) ORGANIZATION INDEX
/

CREATE TABLE B_SEARCH_USER_RIGHT
(
	USER_ID NUMBER(18) NOT NULL,
	GROUP_CODE VARCHAR2(100 CHAR) NOT NULL,
	CONSTRAINT PK_B_SEARCH_USER_RIGHT PRIMARY KEY (USER_ID, GROUP_CODE)
) ORGANIZATION INDEX
/

CREATE TABLE B_SEARCH_CONTENT_SITE
(
	SEARCH_CONTENT_ID NUMBER(18) NOT NULL,
	SITE_ID CHAR(2 CHAR) NOT NULL,
	URL VARCHAR2(2000 CHAR),
	CONSTRAINT PK_B_SEARCH_CONTENT_SITE PRIMARY KEY (SEARCH_CONTENT_ID, SITE_ID)
)
/

CREATE TABLE B_SEARCH_CONTENT_STEM
(
	SEARCH_CONTENT_ID NUMBER(18) NOT NULL,
	LANGUAGE_ID CHAR(2 CHAR) NOT NULL,
	STEM NUMBER(18) NOT NULL,
	TF NUMBER NOT NULL,
	PS NUMBER NOT NULL,
	CONSTRAINT PK_B_SEARCH_CONTENT_STEM PRIMARY KEY (STEM, LANGUAGE_ID, TF, PS, SEARCH_CONTENT_ID)
)
ORGANIZATION INDEX
/

CREATE INDEX IND_B_SEARCH_CONTENT_STEM ON B_SEARCH_CONTENT_STEM (SEARCH_CONTENT_ID)
/

CREATE TABLE B_SEARCH_STEM
(
	ID NUMBER(18) NOT NULL,
	STEM VARCHAR2(50 CHAR) NOT NULL,
	CONSTRAINT PK_B_SEARCH_STEM PRIMARY KEY (ID)
)
/
CREATE UNIQUE INDEX IND_B_SEARCH_STEM ON B_SEARCH_STEM (STEM)
/
CREATE SEQUENCE SQ_B_SEARCH_STEM
/
CREATE OR REPLACE TRIGGER B_SEARCH_STEM_INSERT
BEFORE INSERT
ON B_SEARCH_STEM
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_SEARCH_STEM.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE TABLE B_SEARCH_CONTENT_TITLE
(
	SEARCH_CONTENT_ID NUMBER(18) NOT NULL,
	SITE_ID CHAR(2 CHAR) NOT NULL,
	WORD VARCHAR2(100 CHAR) NOT NULL,
	POS NUMBER(18) NOT NULL,
	CONSTRAINT PK_B_SEARCH_CONTENT_TITLE PRIMARY KEY (SITE_ID, WORD, SEARCH_CONTENT_ID, POS)
)
ORGANIZATION INDEX
/

CREATE INDEX IND_B_SEARCH_CONTENT_TITLE ON B_SEARCH_CONTENT_TITLE (SEARCH_CONTENT_ID)
/

CREATE TYPE T_STRING IS TABLE OF VARCHAR2(2000 CHAR);
/
CREATE OR REPLACE FUNCTION F_STRING_EXPLODE(DELIMITER VARCHAR2, STRING VARCHAR2)
RETURN T_STRING AS
	RESULT T_STRING := T_STRING();
	P INTEGER;
	F INTEGER;
BEGIN
	P := 1;
	IF NOT (DELIMITER IS NULL OR STRING IS NULL) THEN
		LOOP
			F := INSTR(STRING, DELIMITER, P);
			EXIT WHEN F = 0;
			RESULT.EXTEND;
			RESULT(RESULT.COUNT) := SUBSTR(STRING, P, F-P);
			P := F + LENGTH(DELIMITER);
		END LOOP;
		RESULT.EXTEND;
		RESULT(RESULT.COUNT) := SUBSTR(STRING, P);
	END IF;
	RETURN RESULT;
END;
/

CREATE OR REPLACE TYPE T_STEM AS OBJECT (STEM NUMBER(18), TF NUMBER, PS NUMBER)
/

CREATE OR REPLACE TYPE TT_STEM AS TABLE OF T_STEM
/

CREATE OR REPLACE FUNCTION F_STEM(P_RAW IN VARCHAR2)  RETURN TT_STEM
PIPELINED IS
	L1 T_STRING := T_STRING();
	L2 T_STRING := T_STRING();
	D VARCHAR2(10 CHAR);
BEGIN
	SELECT TRANSLATE(TRIM(TO_CHAR(1.1,'9D9')),' 1',' ') INTO D FROM DUAL;
	IF NOT P_RAW IS NULL THEN
		L1 := F_STRING_EXPLODE(' ', P_RAW);
		FOR I IN L1.FIRST..L1.COUNT LOOP
			L2 := F_STRING_EXPLODE(';', L1(I));
			IF L2.COUNT = 3 THEN
				PIPE ROW (T_STEM(L2(1), TO_NUMBER(REPLACE(L2(2), '.', D)), TO_NUMBER(REPLACE(L2(3), '.', D))));
			END IF;
		END LOOP;
	END IF;
	RETURN;
END;
/

CREATE TABLE B_SEARCH_CONTENT_FREQ (
	STEM NUMBER(18) NOT NULL,
	LANGUAGE_ID CHAR(2 CHAR) NOT NULL,
	SITE_ID CHAR(2 CHAR),
	FREQ NUMBER NOT NULL,
	TF NUMBER
)
/
CREATE INDEX UX_B_SEARCH_CONTENT_FREQ ON B_SEARCH_CONTENT_FREQ (STEM, LANGUAGE_ID, SITE_ID)
/

CREATE TABLE B_SEARCH_CUSTOM_RANK
(
	ID NUMBER(18) NOT NULL,
	SITE_ID CHAR(2 CHAR) NOT NULL,
	MODULE_ID VARCHAR2(200 CHAR) NOT NULL,
	PARAM1 VARCHAR2(2000 CHAR),
	PARAM2 VARCHAR2(2000 CHAR),
	ITEM_ID VARCHAR2(255 CHAR),
	RANK NUMBER(18) DEFAULT 0 NOT NULL,
	APPLIED CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	CONSTRAINT PK_B_SEARCH_CUSTOM_RANK PRIMARY KEY (ID)
)
/

CREATE INDEX IND_B_SEARCH_CUSTOM_RANK ON B_SEARCH_CUSTOM_RANK (SITE_ID, MODULE_ID)
/

CREATE SEQUENCE SQ_B_SEARCH_CUSTOM_RANK
/

CREATE OR REPLACE TRIGGER B_SEARCH_CUSTOM_RANK_INSERT
BEFORE INSERT
ON B_SEARCH_CUSTOM_RANK
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_SEARCH_CUSTOM_RANK.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/

CREATE TABLE B_SEARCH_TAGS
(
	SEARCH_CONTENT_ID NUMBER NOT NULL,
	SITE_ID CHAR(2 CHAR) NOT NULL,
	NAME VARCHAR2(255 CHAR) NOT NULL,
	CONSTRAINT PK_B_SEARCH_TAGS PRIMARY KEY (SEARCH_CONTENT_ID, SITE_ID, NAME)
)
/
CREATE INDEX IX_B_SEARCH_TAGS_0 ON B_SEARCH_TAGS (NAME)
/

CREATE TABLE B_SEARCH_SUGGEST
(
	ID		NUMBER(18)		NOT NULL,
	SITE_ID		CHAR(2 CHAR)		NOT NULL,
	FILTER_MD5	VARCHAR2(32 CHAR)	NOT NULL,
	PHRASE		VARCHAR2(250 CHAR)	NOT NULL,
	RATE		NUMBER			NOT NULL,
	TIMESTAMP_X	DATE			NOT NULL,
	RESULT_COUNT	NUMBER(18)		NOT NULL,
	CONSTRAINT PK_B_SEARCH_SUGGEST PRIMARY KEY (ID)
)
/
CREATE INDEX IND_B_SEARCH_SUGGEST ON b_search_suggest (FILTER_MD5, PHRASE, RATE)
/
CREATE INDEX IND_B_SEARCH_SUGGEST_PHRASE ON b_search_suggest (PHRASE, RATE)
/
CREATE INDEX IND_B_SEARCH_SUGGEST_TIME ON b_search_suggest (TIMESTAMP_X)
/
CREATE SEQUENCE SQ_B_SEARCH_SUGGEST
/
CREATE OR REPLACE TRIGGER B_SEARCH_SUGGEST_INSERT
BEFORE INSERT
ON B_SEARCH_SUGGEST
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
 		SELECT SQ_B_SEARCH_SUGGEST.NEXTVAL INTO :NEW.ID FROM DUAL;
	END IF;
END;
/
