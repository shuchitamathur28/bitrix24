CREATE TABLE B_IM_STATUS
(
	USER_ID NUMBER(18) not null,
	COLOR VARCHAR2(255 CHAR) NULL,
	STATUS VARCHAR2(50 CHAR) DEFAULT 'online',
	STATUS_TEXT VARCHAR2(255 CHAR) null,
	IDLE date null,
	DESKTOP_LAST_DATE date null,
	MOBILE_LAST_DATE date null,
	EVENT_ID NUMBER(18) null,
	EVENT_UNTIL_DATE date null,
	PRIMARY KEY (USER_ID)
)
/
CREATE INDEX IX_IM_STATUS_EUD ON B_IM_STATUS (EVENT_UNTIL_DATE)
/

CREATE TABLE B_IM_CHAT
(
	ID NUMBER(18) NOT NULL,
	PARENT_ID NUMBER(18) NULL DEFAULT '0',
	TITLE VARCHAR2(255 CHAR) NULL,
	DESCRIPTION clob NULL,
	COLOR VARCHAR2(255 CHAR) NULL,
	TYPE CHAR(1 CHAR) NULL,
	EXTRANET CHAR(1 CHAR) NULL,
	AUTHOR_ID NUMBER(18) NOT NULL,
	AVATAR NUMBER(18) NULL,
	CALL_TYPE NUMBER(1) DEFAULT '0',
	CALL_NUMBER VARCHAR2(20 CHAR) NULL,
	ENTITY_TYPE VARCHAR2(50 CHAR) NULL,
	ENTITY_ID VARCHAR2(255 CHAR) NULL,
	ENTITY_DATA_1 VARCHAR2(255 CHAR) NULL,
	ENTITY_DATA_2 VARCHAR2(255 CHAR) NULL,
	ENTITY_DATA_3 VARCHAR2(255 CHAR) NULL,
	DISK_FOLDER_ID NUMBER(18) NULL,
	LAST_MESSAGE_ID NUMBER(18) NULL,
	DATE_CREATE date NULL,
	PRIMARY KEY (ID)
)
/
CREATE INDEX IX_IM_CHAT_1 ON B_IM_CHAT (AUTHOR_ID)
/
CREATE INDEX IX_IM_CHAT_2 ON B_IM_CHAT (ENTITY_TYPE, ENTITY_ID, AUTHOR_ID)
/
CREATE INDEX IX_IM_CHAT_3 ON B_IM_CHAT (CALL_NUMBER, AUTHOR_ID)
/
CREATE INDEX IX_IM_CHAT_4 ON B_IM_CHAT (TYPE)
/
CREATE INDEX IX_IM_CHAT_5 ON B_IM_CHAT (PARENT_ID)
/
CREATE SEQUENCE SQ_B_IM_CHAT
/
CREATE OR REPLACE TRIGGER B_IM_CHAT_insert
BEFORE INSERT
ON B_IM_CHAT
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_IM_CHAT.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/


CREATE TABLE B_IM_MESSAGE
(
	ID NUMBER(18) NOT NULL,
	CHAT_ID NUMBER(18) NOT NULL,
	AUTHOR_ID NUMBER(18) NOT NULL,
	MESSAGE clob NULL,
	MESSAGE_OUT clob NULL,
	DATE_CREATE date NOT NULL,
	EMAIL_TEMPLATE VARCHAR2(255 CHAR) NULL,
	NOTIFY_TYPE NUMBER(2) DEFAULT '0',
	NOTIFY_MODULE VARCHAR2(255 CHAR) NULL,
	NOTIFY_EVENT VARCHAR2(255 CHAR) NULL,
	NOTIFY_TAG VARCHAR2(255 CHAR) NULL,
	NOTIFY_SUB_TAG VARCHAR2(255 CHAR) NULL,
	NOTIFY_TITLE VARCHAR2(255 CHAR) NULL,
	NOTIFY_BUTTONS clob NULL,
	NOTIFY_READ CHAR(1 CHAR) DEFAULT 'N',
	IMPORT_ID NUMBER(18) NULL,
	PRIMARY KEY (ID)
)
/
CREATE INDEX IX_IM_MESS_2 ON B_IM_MESSAGE (NOTIFY_TAG, AUTHOR_ID)
/
CREATE INDEX IX_IM_MESS_3 ON B_IM_MESSAGE (NOTIFY_SUB_TAG, AUTHOR_ID)
/
CREATE INDEX IX_IM_MESS_4 ON B_IM_MESSAGE (CHAT_ID, NOTIFY_READ)
/
CREATE INDEX IX_IM_MESS_5 ON B_IM_MESSAGE (CHAT_ID, DATE_CREATE)
/
CREATE INDEX IX_IM_MESS_6 ON B_IM_MESSAGE (AUTHOR_ID)
/
CREATE INDEX IX_IM_MESS_7 ON B_IM_MESSAGE (CHAT_ID, ID)
/
CREATE INDEX IX_IM_MESS_8 ON B_IM_MESSAGE (NOTIFY_TYPE, DATE_CREATE)
/
CREATE SEQUENCE SQ_B_IM_MESSAGE
/
CREATE OR REPLACE TRIGGER B_IM_MESSAGE_insert
BEFORE INSERT
ON B_IM_MESSAGE
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_IM_MESSAGE.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/


CREATE TABLE B_IM_MESSAGE_PARAM
(
	ID NUMBER(18) NOT NULL,
	MESSAGE_ID NUMBER(18) NOT NULL,
	PARAM_NAME VARCHAR2(100 CHAR) NOT NULL,
	PARAM_VALUE VARCHAR2(100 CHAR) NULL,
	PARAM_JSON clob NULL,
	CONSTRAINT PK_B_IM_MESSAGE_PARAM PRIMARY KEY (ID)
)
/
CREATE INDEX IX_B_IM_MESSAGE_PARAM_1 ON B_IM_MESSAGE_PARAM(MESSAGE_ID, PARAM_NAME)
/
CREATE INDEX IX_B_IM_MESSAGE_PARAM_2 ON B_IM_MESSAGE_PARAM(PARAM_NAME, PARAM_VALUE, MESSAGE_ID)
/
CREATE SEQUENCE SQ_B_IM_MESSAGE_PARAM
/
CREATE OR REPLACE TRIGGER B_IM_MESSAGE_PARAM_insert
BEFORE INSERT
ON B_IM_MESSAGE_PARAM
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_IM_MESSAGE_PARAM.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/



CREATE TABLE B_IM_RELATION
(
	ID NUMBER(18) NOT NULL,
	CHAT_ID NUMBER(18) NOT NULL,
	MESSAGE_TYPE CHAR(1 CHAR) DEFAULT 'P',
	USER_ID NUMBER(18) NOT NULL,
	START_ID NUMBER(18) DEFAULT '0',
	LAST_ID NUMBER(18) DEFAULT '0',
	LAST_SEND_ID NUMBER(18) DEFAULT '0',
	LAST_FILE_ID NUMBER(18) DEFAULT '0',
	LAST_READ date NULL,
	STATUS NUMBER(2) DEFAULT '0',
	CALL_STATUS NUMBER(1) DEFAULT '0',
	NOTIFY_BLOCK CHAR(1 CHAR) DEFAULT 'N',
	MANAGER CHAR(1 CHAR) DEFAULT 'N',
	PRIMARY KEY (ID)
)
/
CREATE INDEX IX_IM_REL_1 ON B_IM_RELATION (CHAT_ID)
/
CREATE INDEX IX_IM_REL_2 ON B_IM_RELATION (USER_ID, MESSAGE_TYPE, STATUS)
/
CREATE INDEX IX_IM_REL_3 ON B_IM_RELATION (USER_ID, MESSAGE_TYPE, CHAT_ID)
/
CREATE INDEX IX_IM_REL_4 ON B_IM_RELATION (USER_ID, STATUS)
/
CREATE INDEX IX_IM_REL_5 ON B_IM_RELATION (MESSAGE_TYPE, STATUS)
/
CREATE INDEX IX_IM_REL_6 ON B_IM_RELATION (CHAT_ID, USER_ID)
/
CREATE SEQUENCE SQ_B_IM_RELATION
/
CREATE OR REPLACE TRIGGER B_IM_RELATION_insert
BEFORE INSERT
ON B_IM_RELATION
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_IM_RELATION.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_IM_RECENT
(
	USER_ID NUMBER(18) not null,
	ITEM_TYPE char(1 CHAR) default ('P') not null,
	ITEM_ID NUMBER(18) not null,
	ITEM_MID NUMBER(18) not null,
	CONSTRAINT PK_B_IM_RECENT PRIMARY KEY (USER_ID, ITEM_TYPE, ITEM_ID)
)
/
CREATE INDEX IX_IM_REC_1 ON B_IM_RECENT(ITEM_TYPE, ITEM_ID)
/
CREATE SEQUENCE SQ_B_IM_RECENT START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE TABLE B_IM_BOT
(
	BOT_ID NUMBER(18) not null,
	MODULE_ID VARCHAR2(50 CHAR) NOT NULL,
	CODE VARCHAR2(50 CHAR) NOT NULL,
	TYPE char(1 CHAR) default ('B') not null,
	CLASS VARCHAR2(255 CHAR) NULL,
	LANG VARCHAR2(50 CHAR) DEFAULT '' NULL,
	METHOD_BOT_DELETE VARCHAR2(255 CHAR) NULL,
	METHOD_MESSAGE_ADD VARCHAR2(255 CHAR) NULL,
	METHOD_WELCOME_MESSAGE VARCHAR2(255 CHAR) NULL,
	TEXT_PRIVATE_WELCOME_MESSAGE clob NULL,
	TEXT_CHAT_WELCOME_MESSAGE clob NULL,
	COUNT_COMMAND NUMBER(18) DEFAULT '0',
	COUNT_MESSAGE NUMBER(18) DEFAULT '0',
	COUNT_CHAT NUMBER(18) DEFAULT '0',
	COUNT_USER NUMBER(18) DEFAULT '0',
	APP_ID VARCHAR2(128 CHAR) NULL,
	VERIFIED char(1 CHAR) default ('N') null,
	OPENLINE char(1 CHAR) default ('N') null,
	CONSTRAINT PK_B_IM_BOT PRIMARY KEY (BOT_ID)
)
/
CREATE SEQUENCE SQ_B_IM_BOT START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE TABLE B_IM_BOT_CHAT
(
	ID NUMBER(18) NOT NULL,
	BOT_ID NUMBER(18) NOT NULL,
	CHAT_ID NUMBER(18) NOT NULL,
	PRIMARY KEY (ID)
)
/
CREATE SEQUENCE SQ_B_IM_BOT_CHAT
/
CREATE OR REPLACE TRIGGER B_IM_BOT_CHAT_insert
BEFORE INSERT
ON B_IM_BOT_CHAT
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_IM_BOT_CHAT.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_IM_BOT_TOKEN
(
	ID NUMBER(18) NOT NULL,
	TOKEN VARCHAR2(32 CHAR) NULL,
	DATE_CREATE date NOT NULL,
	DATE_EXPIRE date NULL,
	BOT_ID NUMBER(18) DEFAULT '0',
	DIALOG_ID VARCHAR2(255 CHAR) NOT NULL,
	CONSTRAINT PK_B_IM_BOT_TOKEN PRIMARY KEY (ID)
)
/
CREATE INDEX IX_IM_BOT_TOKEN_1 ON B_IM_BOT_TOKEN(DATE_EXPIRE, BOT_ID)
/
CREATE INDEX IX_IM_BOT_TOKEN_2 ON B_IM_BOT_TOKEN(TOKEN)
/
CREATE SEQUENCE SQ_B_IM_BOT_TOKEN
/
CREATE OR REPLACE TRIGGER B_IM_BOT_TOKEN_insert
BEFORE INSERT
ON B_IM_BOT_TOKEN
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_IM_BOT_TOKEN.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_IM_COMMAND
(
	ID NUMBER(18) NOT NULL,
	MODULE_ID VARCHAR2(50 CHAR) NOT NULL,
	BOT_ID NUMBER(18) NOT NULL,
	APP_ID VARCHAR2(128 CHAR) NULL,
	COMMAND VARCHAR2(255 CHAR) NOT NULL,
	COMMON char(1 CHAR) default ('N') null,
	HIDDEN char(1 CHAR) default ('N') null,
	SONET_SUPPORT char(1 CHAR) default ('N') null,
	EXTRANET_SUPPORT char(1 CHAR) default ('N') null,
	CLASS VARCHAR2(255 CHAR) NULL,
	METHOD_COMMAND_ADD VARCHAR2(255 CHAR) NULL,
	METHOD_LANG_GET VARCHAR2(255 CHAR) NULL,
	PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SQ_B_IM_COMMAND INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_IM_COMMAND_INSERT
BEFORE INSERT
ON B_IM_COMMAND
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_IM_COMMAND.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_IM_COMMAND_LANG
(
	ID NUMBER(18) NOT NULL,
	COMMAND_ID NUMBER(18) NOT NULL,
	LANGUAGE_ID CHAR(2 CHAR) NOT NULL,
	TITLE VARCHAR2(255 CHAR) NULL,
	PARAMS VARCHAR2(255 CHAR) NULL,
	CONSTRAINT PK_B_IM_COMMAND_LANG PRIMARY KEY (ID)
)
/

CREATE UNIQUE INDEX UX_B_IM_COMMAND_LANG ON B_IM_COMMAND_LANG(COMMAND_ID, LANGUAGE_ID)
/

CREATE SEQUENCE SQ_B_IM_COMMAND_LANG INCREMENT BY 1 NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE OR REPLACE TRIGGER B_IM_COMMAND_LANG_INSERT
BEFORE INSERT
ON B_IM_COMMAND_LANG
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_IM_COMMAND_LANG.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/

CREATE TABLE B_IM_ALIAS
(
	ID NUMBER(18) not null,
	ALIAS VARCHAR2(255 CHAR) NOT NULL,
	ENTITY_TYPE VARCHAR2(255 CHAR) NOT NULL,
	ENTITY_ID VARCHAR2(255 CHAR) NOT NULL,
	CONSTRAINT PK_B_IM_ALIAS PRIMARY KEY (ID)
)
/
CREATE UNIQUE INDEX UX_B_IM_ALIAS ON B_IM_ALIAS(ALIAS)
/
CREATE SEQUENCE SQ_B_IM_ALIAS START WITH 1 INCREMENT BY 1 NOMINVALUE NOMAXVALUE NOCYCLE NOCACHE NOORDER
/

CREATE TABLE B_IM_EXTERNAL_AVATAR
(
	ID NUMBER(18) NOT NULL,
	LINK_MD5 VARCHAR2(32 CHAR) NOT NULL,
	AVATAR_ID NUMBER(18) NOT NULL,
	CONSTRAINT PK_B_IM_EXTERNAL_AVATAR PRIMARY KEY (ID)
)
/
CREATE INDEX B_IM_EXTERNAL_AVATAR ON B_IM_EXTERNAL_AVATAR(LINK_MD5)
/
CREATE SEQUENCE SQ_B_IM_EXTERNAL_AVATAR
/
CREATE OR REPLACE TRIGGER B_IM_EXTERNAL_AVATAR_insert
BEFORE INSERT
ON B_IM_EXTERNAL_AVATAR
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT SQ_B_IM_EXTERNAL_AVATAR.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/