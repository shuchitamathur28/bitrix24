CREATE TABLE b_list_rubric
(
	ID NUMBER(18) NOT NULL,
	LID CHAR(2 CHAR) NOT NULL,
	NAME VARCHAR2(100 CHAR),
	CODE VARCHAR2(100 CHAR),
	DESCRIPTION VARCHAR2(2000 CHAR),
	SORT NUMBER(18) DEFAULT 100 NOT NULL,
	ACTIVE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	AUTO CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	DAYS_OF_MONTH VARCHAR2(100 CHAR),
	DAYS_OF_WEEK VARCHAR2(15 CHAR),
	TIMES_OF_DAY VARCHAR2(255 CHAR),
	TEMPLATE VARCHAR2(100 CHAR),
	LAST_EXECUTED DATE,
	VISIBLE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	FROM_FIELD VARCHAR2(255 CHAR),
	CONSTRAINT PK_LIST_RUBRIC_ID PRIMARY KEY (ID),
	CONSTRAINT FK_LIST_RUBRIC_LID FOREIGN KEY (LID) REFERENCES b_lang (LID)
)
/
CREATE SEQUENCE sq_b_list_rubric
/
CREATE OR REPLACE TRIGGER b_list_rubric_insert
BEFORE INSERT
ON b_list_rubric
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	 	SELECT sq_b_list_rubric.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE TABLE b_subscription
(
	ID NUMBER(18) NOT NULL,
	DATE_INSERT DATE DEFAULT SYSDATE NOT NULL,
	DATE_UPDATE DATE,
	USER_ID NUMBER(18),
	ACTIVE CHAR(1 CHAR) DEFAULT 'Y' NOT NULL,
	EMAIL VARCHAR2(255 CHAR) NOT NULL,
	FORMAT VARCHAR2(4 CHAR) DEFAULT 'text' NOT NULL,
	CONFIRM_CODE VARCHAR2(8 CHAR),
	CONFIRMED CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	DATE_CONFIRM DATE DEFAULT SYSDATE NOT NULL,
	CONSTRAINT PK_SUBSCRIPTION_ID PRIMARY KEY (ID),
	CONSTRAINT FK_SUBSCRIPTION_USER	FOREIGN KEY (USER_ID) REFERENCES b_user (ID)
)
/
CREATE INDEX IX_DATE_CONFIRM ON b_subscription(CONFIRMED,DATE_CONFIRM)
/
CREATE UNIQUE INDEX UK_SUBSCRIPTION_EMAIL ON B_SUBSCRIPTION (UPPER(EMAIL), USER_ID)
/
CREATE SEQUENCE sq_b_subscription
/
CREATE OR REPLACE TRIGGER b_subscription_insert
BEFORE INSERT
ON b_subscription
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
	 	SELECT sq_b_subscription.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE OR REPLACE TRIGGER  b_subscription_update
BEFORE UPDATE
ON  b_subscription
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.DATE_UPDATE IS NOT NULL THEN
		:NEW.DATE_UPDATE := SYSDATE;
	ELSE
		:NEW.DATE_UPDATE := :OLD.DATE_UPDATE;
	END IF;
END;
/
CREATE TABLE b_subscription_rubric
(
	SUBSCRIPTION_ID NUMBER(18) NOT NULL,
	LIST_RUBRIC_ID NUMBER(18) NOT NULL,
	CONSTRAINT UK_SUBSCRIPTION_RUBRIC UNIQUE (SUBSCRIPTION_ID,LIST_RUBRIC_ID),
	CONSTRAINT FK_SUBSCR_RUBRIC_RUBRIC FOREIGN KEY (LIST_RUBRIC_ID) REFERENCES b_list_rubric (ID),
	CONSTRAINT FK_SUBSCR_RUBRIC_SUBSCR FOREIGN KEY (SUBSCRIPTION_ID) REFERENCES b_subscription (ID)
)
/
CREATE TABLE b_posting
(
	ID NUMBER(18) NOT NULL,
	TIMESTAMP_X DATE DEFAULT SYSDATE NOT NULL,
	STATUS CHAR(1 CHAR) DEFAULT 'D' NOT NULL,
	VERSION CHAR(1 CHAR),
	DATE_SENT DATE,
	SENT_BCC CLOB,
	FROM_FIELD VARCHAR2(255 CHAR) NOT NULL,
	TO_FIELD VARCHAR2(255 CHAR),
	BCC_FIELD CLOB,
	EMAIL_FILTER VARCHAR2(255 CHAR),
	SUBJECT VARCHAR2(255 CHAR) NOT NULL,
	BODY_TYPE VARCHAR2(4 CHAR) DEFAULT 'text' NOT NULL,
	BODY CLOB NOT NULL,
	DIRECT_SEND CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
	CHARSET VARCHAR2(50 CHAR),
	MSG_CHARSET VARCHAR2(255 CHAR),
	SUBSCR_FORMAT VARCHAR2(4 CHAR),
	ERROR_EMAIL CLOB,
	AUTO_SEND_TIME DATE,
	BCC_TO_SEND CLOB,
	CONSTRAINT PK_B_POSTING_ID PRIMARY KEY (ID)
)
/
CREATE SEQUENCE sq_b_posting
/
CREATE OR REPLACE TRIGGER b_posting_insert
BEFORE INSERT
ON b_posting
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT sq_b_posting.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE OR REPLACE TRIGGER b_posting_update
BEFORE UPDATE
ON b_posting
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.TIMESTAMP_X IS NOT NULL THEN
		:NEW.TIMESTAMP_X := SYSDATE;
	ELSE
		:NEW.TIMESTAMP_X := :OLD.TIMESTAMP_X;
	END IF;
END;
/
CREATE TABLE b_posting_email
(
	ID NUMBER(18) NOT NULL,
	POSTING_ID NUMBER(18) NOT NULL,
	STATUS CHAR(1 CHAR) NOT NULL,
	EMAIL VARCHAR2(255 CHAR) NOT NULL,
	SUBSCRIPTION_ID NUMBER(18),
	USER_ID NUMBER(18),
	CONSTRAINT PK_POSTING_EMAIL_ID PRIMARY KEY (ID)
)
/
CREATE INDEX ix_posting_email_status on b_posting_email(POSTING_ID, STATUS)
/
CREATE INDEX ix_posting_email_email on b_posting_email(POSTING_ID, EMAIL)
/
CREATE SEQUENCE sq_b_posting_email
/
CREATE OR REPLACE TRIGGER b_posting_email_insert
BEFORE INSERT
ON b_posting_email
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
	IF :NEW.ID IS NULL THEN
		SELECT sq_b_posting_email.NEXTVAL INTO :NEW.ID FROM dual;
	END IF;
END;
/
CREATE TABLE b_posting_rubric
(
	POSTING_ID NUMBER(18) NOT NULL,
	LIST_RUBRIC_ID NUMBER(18) NOT NULL,
	CONSTRAINT UK_POSTING_POSTING_RUBRIC UNIQUE (POSTING_ID,LIST_RUBRIC_ID),
	CONSTRAINT FK_POSTING_RUBRIC_POSTING FOREIGN KEY (POSTING_ID) REFERENCES b_posting (ID),
	CONSTRAINT FK_POSTING_RUBRIC_RUBRIC FOREIGN KEY (LIST_RUBRIC_ID) REFERENCES b_list_rubric (ID)
)
/
CREATE TABLE b_posting_group
(
	POSTING_ID NUMBER(18) NOT NULL,
	GROUP_ID NUMBER(18) NOT NULL,
	CONSTRAINT UK_POSTING_POSTING_GROUP UNIQUE (POSTING_ID,GROUP_ID),
	CONSTRAINT FK_POSTING_GROUP_POSTING FOREIGN KEY (POSTING_ID) REFERENCES b_posting (ID),
	CONSTRAINT FK_POSTING_GROUP_GROUP FOREIGN KEY (GROUP_ID) REFERENCES b_group (ID)
)
/
CREATE TABLE b_posting_file
(
	POSTING_ID NUMBER(18) NOT NULL,
	FILE_ID NUMBER(18) NOT NULL,
	CONSTRAINT UK_POSTING_POSTING_FILE UNIQUE (POSTING_ID,FILE_ID),
	CONSTRAINT FK_POSTING_FILE_POSTING FOREIGN KEY (POSTING_ID) REFERENCES b_posting (ID)
)
/
